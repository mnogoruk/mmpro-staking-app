{"version":3,"sources":["components/common/Button.js","components/common/Modal.js","hooks/useOnClickOutside.js","components/common/Card.js","components/common/Spinner.js","components/Header.js","components/Footer.js","pages/StakingPage.js","utils.js","utils/getAddress.js","App.js","index.js"],"names":["color","bgColor","showBorder","onClick","className","children","uppercase","cx","Modal","onClose","title","ref","useRef","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","querySelector","classList","remove","style","backgroundColor","width","height","top","left","zIndex","minWidth","maxWidth","noLine","Spinner","animationDuration","size","borderWidth","borderTopColor","borderBottomColor","defaultProps","Header","href","src","alt","rel","stakeTokenDataList","name","abi","MMPRO","addr","img","BUSD","HomePage","props","useState","loading","setLoading","initLoading","setInitLoading","stakeLoading","setStakeLoading","unstakeLoading","setUnstakeLoading","withdrawLoading","setWithdrawLoading","error","setError","web3","setWeb3","accounts","setAccounts","flexibleStakeContract","setFlexibleStakeContract","fixedStakeContract","setFixedStakeContract","Array","wishStakeContractList","setWishStakeContractList","balance","setBalance","totalStaked","setTotalStaked","stakedByUser","setStakedByUser","unstakeList","setUnstakeList","totalRewards","setTotalRewards","amount","setAmount","showModal","setShowModal","optionsState","setOptionsState","curStakeTokenID","setCurStakeTokenID","curStakeTokenInfo","setCurStakeTokenInfo","curStakeTokenContract","setCurStakeTokenContract","stakeTokenBoxList","setStakeTokenBoxList","tabIndex","setTabIndex","fixedStakingOption","setFixedStakingOption","stakingOptionState","setStakingOptionState","init","a","isReady","Promise","resolve","reject","window","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","net","getId","tempWishStakeList","i","length","tempStakeToken","Contract","push","tempflexibleStakeContract","FlexibleStake","tempStakeList","stakeTokenInfo","methods","tokenStakeInfo","call","id","tempfixedStakeContract","FixedStake","getAccounts","initFlexibleBalance","balanceOf","tmpBalance","getUserStakes","stakedByUserArray","sumOfStaked","unstakeLists","sumTotalRewards","calcRewardsByIndex","rewards","parseInt","stakeToken","on","initFixedBalance","getStakeOptions","tmpFixedStakeOptinos","updateAll","all","updateAccountBalance","updateTotalStaked","updateStakedByUser","updateTotalRewards","actual","arg","fromExponential","allowance","approve","send","from","stake","code","unstake","parseFloat","withdraw","withdrawEarnings","claimRewards","onSelectChanged","value","initData","triggerAlreadyInjectedWeb3","Button","Card","background","map","stakeTokenBox","index","key","handleSelectCurStake","toFixed","type","placeholder","onChange","e","option","periodInDays","fixedStake","Footer","App","path","exact","StakingPage","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.6db8e863.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nexport default ({\r\n  color = \"white\",\r\n  bgColor = \"primary\",\r\n  showBorder = false,\r\n  onClick,\r\n  className,\r\n  children,\r\n  uppercase = true,\r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={cx(\r\n        className,\r\n        \"rounded-md px-4 py-2 mx-1 font-Montserrat-ExtraBold\",\r\n        uppercase ? \"uppercase\" : \"\",\r\n        showBorder ? \"border\" : \"\",\r\n        \"bg-\" + bgColor,\r\n        \"hover:bg-\" + bgColor + \"-hover\",\r\n        \"hover:border-\" + bgColor + \"-hover\",\r\n        \"text-\" + color,\r\n        \"hover:text-\" + color + \"-hover\",\r\n        \"border-\" + color,\r\n        \"hover:border-\" + color + \"-hover\"\r\n      )}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\n\nconst Modal = ({ children, onClose, title }) => {\n  const ref = useRef(null);\n\n  const closeModal = () => {\n    document.querySelector(\"body\").classList.remove(\"overflow-hidden\");\n    onClose();\n  };\n\n  useOnClickOutside(ref, () => {\n    closeModal();\n  });\n\n  return (\n    <div\n      className=\"fixed overflow-auto flex items-center\"\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, .2)\",\n        width: \"100%\",\n        height: \"100%\",\n        top: 0,\n        left: 0,\n        zIndex: 5000,\n      }}\n    >\n      <div\n        ref={ref}\n        className=\"relative p-8 border-2 border-primary rounded-md bg-white w-full max-w-md m-auto h-custom\"\n        style={{\n          minWidth: \"300px\",\n          maxWidth: \"700px\",\n        }}\n      >\n        <div className=\"flex flex-row items-center\">\n          <div className=\"text-3xl font-bold\">{title}</div>\n        </div>\n\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useEffect } from \"react\";\n\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n","import React from \"react\";\r\n\r\nexport default ({ title, className, noLine, children }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-full rounded-lg card-bg pb-4\" + (className ? className : \"\")\r\n      }\r\n    >\r\n      <div className={`text-center font-Montserrat-ExtraBold text-white text-2xl uppercase pt-3 pb-2 ${noLine ? \"\" : \"border-b border-dashed border-white\"}`}>\r\n        {title}\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = ({ animationDuration, size, color }) => {\n  return (\n    <div\n      className=\"half-circle-spinner\"\n      style={{\n        height: `${size}px`,\n        width: `${size}px`,\n      }}\n    >\n      <div\n        className=\"circle circle-1\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderTopColor: color,\n        }}\n      />\n      <div\n        className=\"circle circle-2\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderBottomColor: color,\n        }}\n      />\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  animationDuration: 1000,\n  size: 40,\n  color: \"#2c6fa5\",\n};\n\nexport default Spinner;\n","import React, { useState } from \"react\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport cx from \"classnames\";\r\nimport { useEffect } from \"react/cjs/react.production.min\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"container px-4 mx-auto py-4\">\r\n      <div className=\"flex flex-row justify-between items-center\">\r\n        <div>\r\n          <a href=\"https://fstaking.github.io/\">\r\n            <img\r\n              src=\"/images/full-logo.png\"\r\n              width=\"180\"\r\n              className=\"cursor-pointer\"\r\n              alt=\"FStaking\"\r\n            />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"py-8\">\r\n      <footer className=\"container mx-auto px-4 flex flex-row justify-center text-center\">\r\n        <a\r\n          href=\"https://twitter.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <img src=\"/images/sm-twitter.svg\" alt=\"\" width=\"20\" />\r\n        </a>\r\n        <a\r\n          href=\"https://t.me/#\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <img src=\"/images/sm-telegram.svg\" alt=\"\" width=\"20\" />\r\n        </a>\r\n        <a\r\n          href=\"#\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <span>v 1.0.0RC3</span>\r\n        </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../components/common/Button\";\r\nimport Modal from \"../components/common/Modal\";\r\nimport Card from \"../components/common/Card\";\r\nimport Spinner from \"../components/common/Spinner\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport FlexibleStake from \"../contracts/FlexibleStake.json\";\r\nimport MMPRO from \"../contracts/MMPRO.json\";\r\nimport BUSD from \"../contracts/Busd.json\";\r\nimport fromExponential from \"from-exponential\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport FixedStake from \"../contracts/FixedStake.json\";\r\nimport {\r\n  getFlexibleStakingAddress,\r\n  getFixedStakingAddress,\r\n  getMMProAddress,\r\n} from \"../utils/getAddress\";\r\n// import { Box, TabsContext, TabList, TabPanel, Tab } from \"@mui/material\";\r\n\r\nconst stakeTokenDataList = [\r\n  {\r\n    name: \"MMPro\",\r\n    abi: MMPRO.abi,\r\n    addr: \"0xa8892B044eCE158cb4869B59F1972Fa01Aae6D2E\",\r\n    img: \"/images/mmpro.png\",\r\n  },\r\n  {\r\n    name: \"Busd\",\r\n    abi: BUSD.abi,\r\n    addr: \"0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7\",\r\n    img: \"/images/busd.png\",\r\n  },\r\n];\r\nconst HomePage = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [initLoading, setInitLoading] = useState(false);\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [web3, setWeb3] = useState();\r\n  const [accounts, setAccounts] = useState();\r\n  const [flexibleStakeContract, setFlexibleStakeContract] = useState();\r\n  const [fixedStakeContract, setFixedStakeContract] = useState();\r\n  // const [stakeToken, setStakeToken] = useState();\r\n  // const [usersStake, setUserStake] = useState();\r\n  // const [freeAmount, setFreeAmount] = useState();\r\n  // const [totalSupply, setTotalSupply] = useState();\r\n\r\n  const [wishStakeContractList, setWishStakeContractList] = useState(Array);\r\n\r\n  const [balance, setBalance] = useState(0);\r\n  const [totalStaked, setTotalStaked] = useState();\r\n  const [stakedByUser, setStakedByUser] = useState(0);\r\n  const [unstakeList, setUnstakeList] = useState([]);\r\n  // const [unstakeAmount, setUnstakeAmount] = useState(0);\r\n  const [totalRewards, setTotalRewards] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [optionsState, setOptionsState] = useState(0);\r\n  const [curStakeTokenID, setCurStakeTokenID] = useState(-1);\r\n  const [curStakeTokenInfo, setCurStakeTokenInfo] = useState();\r\n  const [curStakeTokenContract, setCurStakeTokenContract] = useState();\r\n  const [stakeTokenBoxList, setStakeTokenBoxList] = useState(Array);\r\n  const [tabIndex, setTabIndex] = useState(1);\r\n  const [fixedStakingOption, setFixedStakingOption] = useState(Array);\r\n  const [stakingOptionState, setStakingOptionState] = useState(0);\r\n\r\n  const init = async () => {\r\n    if (isReady()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    var web3;\r\n    try {\r\n      web3 = await initWeb3();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const networkId = await web3.eth.net.getId();\r\n    if (networkId !== 97) {\r\n      setError(\"Please connect BSC Testnet account\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    var tempWishStakeList = [];\r\n    for (var i = 0; i < stakeTokenDataList.length; i++) {\r\n      const tempStakeToken = new web3.eth.Contract(\r\n        stakeTokenDataList[i][\"abi\"],\r\n        stakeTokenDataList[i][\"addr\"]\r\n      );\r\n      tempWishStakeList.push(tempStakeToken);\r\n    }\r\n\r\n    const tempflexibleStakeContract = new web3.eth.Contract(\r\n      FlexibleStake.abi,\r\n      getFlexibleStakingAddress()\r\n    );\r\n    var tempStakeList = [];\r\n    for (var i = 0; i < stakeTokenDataList.length; i++) {\r\n      var stakeTokenInfo = {};\r\n      stakeTokenInfo[\"name\"] = stakeTokenDataList[i][\"name\"];\r\n      stakeTokenInfo[\"img\"] = stakeTokenDataList[i][\"img\"];\r\n      stakeTokenInfo[\"addr\"] = stakeTokenDataList[i][\"addr\"];\r\n      stakeTokenInfo[\"TVL\"] = (\r\n        await tempflexibleStakeContract.methods\r\n          .tokenStakeInfo(stakeTokenDataList[i][\"addr\"])\r\n          .call()\r\n      )[2];\r\n      tempStakeList.push({ ...stakeTokenInfo, id: i });\r\n    }\r\n\r\n    const tempfixedStakeContract = new web3.eth.Contract(\r\n      FixedStake.abi,\r\n      getFixedStakingAddress()\r\n    );\r\n    setWeb3(web3);\r\n    setStakeTokenBoxList(tempStakeList);\r\n    setAccounts(await web3.eth.getAccounts());\r\n    setWishStakeContractList(tempWishStakeList);\r\n    setFlexibleStakeContract(tempflexibleStakeContract);\r\n    setFixedStakeContract(tempfixedStakeContract);\r\n    setLoading(false);\r\n  };\r\n\r\n  const initFlexibleBalance = async () => {\r\n    const tmpBalance = await wishStakeContractList[curStakeTokenID].methods\r\n      .balanceOf(accounts[0])\r\n      .call();\r\n    const stakedByUserArray = await flexibleStakeContract.methods\r\n      .getUserStakes(accounts[0])\r\n      .call();\r\n    var sumOfStaked = 0;\r\n    var unstakeLists = [];\r\n    var sumTotalRewards = 0;\r\n    for (var i = 0; i < stakedByUserArray.length; i++) {\r\n      const rewards = await flexibleStakeContract.methods\r\n        .calcRewardsByIndex(accounts[0], i)\r\n        .call();\r\n      sumTotalRewards += parseInt(rewards);\r\n      if (stakedByUserArray[i].amount > 0) {\r\n        unstakeLists.push({ id: i, amount: stakedByUserArray[i].amount });\r\n      }\r\n      if (\r\n        stakedByUserArray[i].stakeToken ===\r\n        stakeTokenBoxList[curStakeTokenID].addr\r\n      ) {\r\n        sumOfStaked += parseInt(stakedByUserArray[i].amount);\r\n      }\r\n      console.log(stakedByUserArray);\r\n    }\r\n    // setTotalSupply(totalSupply);\r\n    // setFreeAmount(freeAmount);\r\n    // setStakeToken(stakeToken);\r\n    // setBalance(balance);\r\n    // setTotalStaked(totalStaked);\r\n    setBalance(tmpBalance);\r\n    setStakedByUser(sumOfStaked);\r\n    setTotalRewards(sumTotalRewards);\r\n    setUnstakeList(unstakeLists);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      // debugger;\r\n      if (accounts.length > 0) {\r\n        setAccounts(accounts);\r\n      } else {\r\n        setAccounts(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  const initFixedBalance = async () => {\r\n    const tmpFixedStakeOptinos = await fixedStakeContract.methods\r\n      .getStakeOptions(getMMProAddress())\r\n      .call();\r\n    const tmpBalance = await wishStakeContractList[0].methods\r\n      .balanceOf(accounts[0])\r\n      .call();\r\n    const stakedByUserArray = await flexibleStakeContract.methods\r\n      .getUserStakes(accounts[0])\r\n      .call();\r\n    var sumOfStaked = 0;\r\n    var unstakeLists = [];\r\n    var sumTotalRewards = 0;\r\n    for (var i = 0; i < stakedByUserArray.length; i++) {\r\n      sumTotalRewards += stakedByUserArray[i].rewards;\r\n      if (stakedByUserArray[i].amount > 0) {\r\n        unstakeLists.push({ id: i, amount: stakedByUserArray[i].amount });\r\n      }\r\n      if (stakedByUserArray[i].stakeToken === getMMProAddress()) {\r\n        sumOfStaked += parseInt(stakedByUserArray[i].amount);\r\n      }\r\n    }\r\n    // setTotalSupply(totalSupply);\r\n    // setFreeAmount(freeAmount);\r\n    // setStakeToken(stakeToken);\r\n    // setBalance(balance);\r\n    // setTotalStaked(totalStaked);\r\n    setFixedStakingOption(tmpFixedStakeOptinos);\r\n    setBalance(tmpBalance);\r\n    setStakedByUser(sumOfStaked);\r\n    setTotalRewards(sumTotalRewards);\r\n    setUnstakeList(unstakeLists);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      // debugger;\r\n      if (accounts.length > 0) {\r\n        setAccounts(accounts);\r\n      } else {\r\n        setAccounts(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  const isReady = () => {\r\n    return !!flexibleStakeContract && !!web3 && !!accounts;\r\n  };\r\n\r\n  async function updateAll() {\r\n    await Promise.all([\r\n      updateAccountBalance(),\r\n      updateTotalStaked(),\r\n      updateStakedByUser(),\r\n      updateTotalRewards(),\r\n    ]);\r\n  }\r\n\r\n  async function updateStakedByUser() {\r\n    var sumOfStaked = 0;\r\n    var stakedByUserArray;\r\n    if (tabIndex === 1) {\r\n      stakedByUserArray = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n    } else if (tabIndex === 2) {\r\n      stakedByUserArray = await fixedStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n    }\r\n    for (var i = 0; i < stakedByUserArray.length; i++) {\r\n      if (\r\n        stakedByUserArray[i].stakeToken ===\r\n        stakeTokenBoxList[curStakeTokenID].addr\r\n      ) {\r\n        sumOfStaked += parseInt(stakedByUserArray[i].amount);\r\n      }\r\n    }\r\n    setStakedByUser(sumOfStaked);\r\n    return sumOfStaked;\r\n  }\r\n\r\n  async function updateTotalRewards() {\r\n    var sumTotalRewards = 0;\r\n    var unstakeLists = [];\r\n    var stakedByUserArray;\r\n    if (flexibleStakeContract && tabIndex === 1) {\r\n      stakedByUserArray = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      for (var i = 0; i < stakedByUserArray.length; i++) {\r\n        const rewards = await flexibleStakeContract.methods\r\n          .calcRewardsByIndex(accounts[0], i)\r\n          .call();\r\n        sumTotalRewards = parseInt(sumTotalRewards) + parseInt(rewards);\r\n\r\n        if (stakedByUserArray[i].amount > 0) {\r\n          unstakeLists.push({\r\n            id: i,\r\n            amount: stakedByUserArray[i].amount,\r\n          });\r\n        }\r\n      }\r\n      // return sumTotalRewards;\r\n    } else if (fixedStakeContract && tabIndex === 2) {\r\n      stakedByUserArray = await fixedStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      for (var i = 0; i < stakedByUserArray.length; i++) {\r\n        sumTotalRewards =\r\n          parseInt(sumTotalRewards) + parseInt(stakedByUserArray[i].rewards);\r\n\r\n        if (stakedByUserArray[i].amount > 0) {\r\n          unstakeLists.push({\r\n            id: i,\r\n            amount: stakedByUserArray[i].amount,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    setUnstakeList(unstakeLists);\r\n    setTotalRewards(sumTotalRewards);\r\n  }\r\n\r\n  async function updateAccountBalance() {\r\n    var balance;\r\n    if (curStakeTokenContract && tabIndex === 1) {\r\n      balance = await curStakeTokenContract.methods\r\n        .balanceOf(accounts[0])\r\n        .call();\r\n    } else if (tabIndex === 2) {\r\n      balance = await wishStakeContractList[0].methods\r\n        .balanceOf(accounts[0])\r\n        .call();\r\n    }\r\n    setBalance(balance);\r\n    return balance;\r\n  }\r\n\r\n  async function updateTotalStaked() {\r\n    if (flexibleStakeContract && tabIndex === 1) {\r\n      const totalStaked = (\r\n        await flexibleStakeContract.methods\r\n          .tokenStakeInfo(stakeTokenBoxList[curStakeTokenID][\"addr\"])\r\n          .call()\r\n      )[2];\r\n      setTotalStaked(totalStaked);\r\n      return totalStaked;\r\n    }\r\n  }\r\n\r\n  async function stake() {\r\n    setStakeLoading(true);\r\n    const actual = amount * 10 ** 18;\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      const allowance = await curStakeTokenContract.methods\r\n        .allowance(accounts[0], getFlexibleStakingAddress())\r\n        .call();\r\n      if (allowance === \"0\") {\r\n        await curStakeTokenContract.methods\r\n          .approve(getFlexibleStakingAddress(), arg)\r\n          .send({ from: accounts[0] });\r\n      }\r\n      await flexibleStakeContract.methods\r\n        .stake(curStakeTokenInfo[\"addr\"], arg)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function fixedStake() {\r\n    setStakeLoading(true);\r\n    const actual = amount * 10 ** 18;\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      const allowance = await curStakeTokenContract.methods\r\n        .allowance(accounts[0], getFlexibleStakingAddress())\r\n        .call();\r\n      if (allowance === \"0\") {\r\n        await curStakeTokenContract.methods\r\n          .approve(getFlexibleStakingAddress(), arg)\r\n          .send({ from: accounts[0] });\r\n      }\r\n      await flexibleStakeContract.methods\r\n        .stake(curStakeTokenInfo[\"addr\"], arg, fixedStakingOption)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function unstake() {\r\n    if (parseFloat(stakedByUser) === 0) {\r\n      console.error(\"You don't have any staked LEADs yet!\");\r\n      return;\r\n    }\r\n    setUnstakeLoading(true);\r\n    if (tabIndex === 2) {\r\n      return;\r\n    }\r\n    try {\r\n      // const _userStake = await flexibleStake.methods\r\n      //   .getUserStakes(accounts[0])\r\n      //   .call();\r\n      // const count = _userStake.length;\r\n      await flexibleStakeContract.methods\r\n        .withdraw(optionsState)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setUnstakeLoading(false);\r\n  }\r\n\r\n  async function withdrawEarnings() {\r\n    if (parseFloat(totalRewards) === 0) {\r\n      console.error(\"No earnings yet!\");\r\n      return;\r\n    }\r\n    setWithdrawLoading(true);\r\n    if (tabIndex === 1) {\r\n      try {\r\n        const length = unstakeList.length;\r\n        for (var i = 0; i < length; i++) {\r\n          await flexibleStakeContract.methods\r\n            .claimRewards(unstakeList[i][\"id\"])\r\n            .send({ from: accounts[0] });\r\n        }\r\n        await updateAll();\r\n      } catch (err) {\r\n        if (err.code !== 4001) {\r\n          setShowModal(true);\r\n        }\r\n        console.error(err);\r\n      }\r\n    } else if (tabIndex === 2) {\r\n      try {\r\n        const length = unstakeList.length;\r\n        for (var i = 0; i < length; i++) {\r\n          await fixedStakeContract.methods\r\n            .withdraw(getMMProAddress(), unstakeList[i][\"id\"])\r\n            .send({ from: accounts[0] });\r\n        }\r\n        await updateAll();\r\n      } catch (err) {\r\n        if (err.code !== 4001) {\r\n          setShowModal(true);\r\n        }\r\n        console.error(err);\r\n      }\r\n    }\r\n    setWithdrawLoading(false);\r\n  }\r\n\r\n  const handleSelectCurStake = (index) => {\r\n    setCurStakeTokenID(index);\r\n  };\r\n\r\n  const onSelectChanged = (event) => {\r\n    setOptionsState(event.target.value);\r\n  };\r\n\r\n  const onStakeOptionSelectChanged = (e) => {\r\n    setStakingOptionState(e.target.value);\r\n  };\r\n\r\n  const cAPY = (dailyVolumes) => {\r\n    const lastVolume = dailyVolumes.pop();\r\n    if (lastVolume) {\r\n      let sum = 0;\r\n\r\n      dailyVolumes.forEach((dailyVolume) => {\r\n        sum += +dailyVolume.split(\".\")[0];\r\n      });\r\n\r\n      const fee = sum * 0.25;\r\n      const avg = fee / dailyVolumes.length;\r\n      const apr = avg / +lastVolume.split(\".\")[0];\r\n      const apy = (((1 + apr) ** 12 - 1) / 100).toFixed(2);\r\n      if (!Number.isNaN(+apy)) {\r\n        return +apy >= 1000 ? \">1000%\" : `${apy}%`;\r\n      }\r\n    }\r\n    return \"0%\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initData = async () => {\r\n      if (isReady()) {\r\n        setInitLoading(true);\r\n        if (curStakeTokenID !== -1) {\r\n          setCurStakeTokenContract(wishStakeContractList[curStakeTokenID]);\r\n          setCurStakeTokenInfo(stakeTokenBoxList[curStakeTokenID]);\r\n        }\r\n        if (tabIndex === 1 && curStakeTokenID !== -1) {\r\n          await initFlexibleBalance();\r\n          await updateAll();\r\n        } else if (tabIndex === 2) {\r\n          await initFixedBalance();\r\n          await updateAll();\r\n        }\r\n        setInitLoading(false);\r\n      }\r\n    };\r\n    initData();\r\n  }, [curStakeTokenID, tabIndex, web3, accounts]);\r\n\r\n  // useEffect(() => {\r\n  //   const init = async () => {\r\n  //     if (tabIndex === 1) {\r\n  //       await initFlexibleBalance();\r\n  //     } else {\r\n  //       await initFixedBalance();\r\n  //     }\r\n  //   };\r\n  //   init();\r\n  // }, [tabIndex]);\r\n\r\n  useEffect(() => {\r\n    const triggerAlreadyInjectedWeb3 = async () => {\r\n      if (window.ethereum) {\r\n        await init();\r\n      }\r\n    };\r\n    triggerAlreadyInjectedWeb3();\r\n  }, []);\r\n  console.log(fixedStakingOption);\r\n  return (\r\n    <div className=\"w-full overflow-hidden main-gradient\">\r\n      {showModal && (\r\n        <Modal title=\"\" onClose={() => setShowModal(false)}>\r\n          <div className=\"text-2xl mb-2\">\r\n            Error! Your transaction has been reverted!\r\n          </div>\r\n          <div>1. Please check your account and retry again...</div>\r\n          <div>2. Your referrer's address is a registered member if any</div>\r\n\r\n          <div className=\"my-2\">\r\n            Thanks for your support and feel free to{\" \"}\r\n            <a\r\n              href=\"https://www.leadwallet.io/contact\"\r\n              className=\"text-blue-500\"\r\n            >\r\n              contact us\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"flex flex-row justify-center\">\r\n            <Button onClick={() => setShowModal(false)}>Close</Button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <div className=\"relative w-full z-30\">\r\n        <Header />\r\n\r\n        <div className=\"container mx-auto pb-18 px-4 force-height\">\r\n          {!accounts && (\r\n            <div className=\"w-full py-6 text-center\">\r\n              {/* <dov className=\"flex flex-row justify-around\"> */}\r\n              <div className=\"flex items-center justify-center flex-row w-full mb-24 mt-6\">\r\n                <div className=\"text-left\">\r\n                  <p className=\"text-6xl mb-2 font-semibold\">Launchpad</p>\r\n                  <p className=\"text-2xl mb-2 font-light\">\r\n                    {\" \"}\r\n                    Connect your wallet &amp; Participate in IDO on MMPRO\r\n                    Launchpad. For allocation you need to have MMPRO token.{\" \"}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <div className=\"transparentCard justify-between w-80 ml-13\">\r\n                    <h1> MMPRO price</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 0.1321</p>\r\n                      <h1> USD </h1>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"transparentCard justify-between w-80 ml-13\">\r\n                    <h1> MMPRO marketcap</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 13.1m</p>\r\n                      <h1> USD </h1>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"transparentCard justify-between w-80 ml-13\">\r\n                    <h1> MMPRO supply</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 99.50m</p>\r\n                      <h1> MMPRO </h1>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <Button\r\n                className=\"w-full md:w-2/5 text-2xl flex flex-row justify-center mx-auto\"\r\n                uppercase={false}\r\n                onClick={async () => await init()}\r\n              >\r\n                {loading && <Spinner color=\"white\" size={40} />}\r\n                {!loading && (error !== \"\" ? error : \"CONNECT METAMASK WALLET\")}\r\n              </Button>\r\n\r\n              <div className=\"text-white text-center mt-6 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-bold\">\r\n                <h1>Stake Your Token</h1>\r\n              </div>\r\n              <div className=\"w-full md:w-3/6 justify-center mx-auto mt-6\">\r\n                <Card title=\"Rules\">\r\n                  <div className=\"flex flex-col pt-8 pb-4 text-white text-center\">\r\n                    <ul>\r\n                      <li>1. Connect your MetaMask wallet to participate</li>\r\n                      <li>\r\n                        2. Stake tokens and earn daily returns from allocated\r\n                        pool\r\n                      </li>\r\n                      <li>3. Withdraw earned rewards anytime</li>\r\n                      <li>4. Unstake tokens anytime</li>\r\n                      <li>5. Earn extra rewards by referring new members</li>\r\n                    </ul>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* <Box>\r\n            <TabsContext value={tabIndex}>\r\n              <TabList\r\n                onChange={handleTabChange}\r\n                aria-label=\"lab API tabs example\"\r\n              >\r\n                <Tab label=\"Flexible Staking\" value=\"1\" />\r\n                <Tab label=\"Fixed Staking\" value=\"2\" />\r\n              </TabList>\r\n            </TabsContext>\r\n          </Box> */}\r\n          {accounts && (\r\n            <>\r\n              <div>\r\n                <div\r\n                  className=\"xl:w-full xl:mx-0 h-12 hidden sm:block my-4 shadow rounded font-bold\"\r\n                  style={{ background: \"rgba(255, 255, 255, 0.15)\" }}\r\n                >\r\n                  <ul className=\"flex border-b px-5\">\r\n                    <li\r\n                      onClick={() => setTabIndex(1)}\r\n                      className={\r\n                        tabIndex === 1\r\n                          ? \"text-sm border-primary pt-3 rounded-t text-primary mr-12 cursor-default\"\r\n                          : \"text-sm text-white py-3 flex items-center mr-12 hover:text-primary cursor-pointer\"\r\n                      }\r\n                    >\r\n                      <div className=\"flex items-center mb-3\">\r\n                        Flexible Stake\r\n                      </div>\r\n                      {tabIndex === 1 && (\r\n                        <div className=\"w-full h-1 bg-primary rounded-t-md\" />\r\n                      )}\r\n                    </li>\r\n                    <li\r\n                      onClick={() => setTabIndex(2)}\r\n                      className={\r\n                        tabIndex === 2\r\n                          ? \"text-sm border-primary pt-3 rounded-t text-primary mr-12 cursor-default\"\r\n                          : \"text-sm text-white py-3 flex items-center mr-12 hover:text-primary cursor-pointer\"\r\n                      }\r\n                    >\r\n                      <div className=\"flex items-center mb-3\">Fixed Stake</div>\r\n                      {tabIndex === 2 && (\r\n                        <div className=\"w-full h-1 bg-primary rounded-t-md\" />\r\n                      )}\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n              <div className=\"transparentCard justify-center\">\r\n                {stakeTokenBoxList.length > 0 &&\r\n                  curStakeTokenID === -1 &&\r\n                  tabIndex === 1 && (\r\n                    <div className=\"grid grid-col-1 gap-6 w-full\">\r\n                      {/* className=\"transparentCard justify-between w-auto mx-12\" */}\r\n                      <div className=\"text-center\">\r\n                        <span className=\"text-white text-2xl\">\r\n                          Please select one!\r\n                        </span>\r\n                        {stakeTokenBoxList.map((stakeTokenBox, index) => (\r\n                          <div\r\n                            key={index}\r\n                            className=\"flex justify-between w-auto mx-12 my-2 rounded-lg card-bg py-4 px-8\"\r\n                          >\r\n                            <div className=\"flex justify-start\">\r\n                              <img\r\n                                src={stakeTokenBox[\"img\"]}\r\n                                width=\"40\"\r\n                                alt={stakeTokenBox[\"name\"]}\r\n                              />\r\n                              <div className=\"flex flex-col mx-4\">\r\n                                <div className=\"flex flex-row justify-between\">\r\n                                  <div>Name: </div>\r\n                                  <div className=\"font-extrabold\">\r\n                                    {stakeTokenBox[\"name\"]}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"flex flex-row justify-between\">\r\n                                  <div>TVL: </div>\r\n                                  <div className=\"font-extrabold\">\r\n                                    {stakeTokenBox[\"TVL\"]} USD\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <Button onClick={() => handleSelectCurStake(index)}>\r\n                              Stake\r\n                            </Button>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                {curStakeTokenID !== -1 &&\r\n                  initLoading === false &&\r\n                  tabIndex === 1 && (\r\n                    <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10 w-full\">\r\n                      <Card title=\"Your / Total Staked MMPRO\">\r\n                        <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                          <div className=\"text-center\">\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              Yours\r\n                            </span>\r\n                            <span className=\"text-white text-5xl\">\r\n                              {parseFloat(stakedByUser).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                            <br />\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              Total\r\n                            </span>\r\n                            <span className=\"text-white text-5xl\">\r\n                              {parseFloat(totalStaked).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"text-center\">\r\n                            {(\r\n                              parseFloat(\r\n                                parseFloat(totalStaked) / parseFloat(balance)\r\n                              ) * 100\r\n                            ).toFixed(5)}\r\n                            %\r\n                          </div>\r\n                          <div className=\"text-center\">of total supply</div>\r\n                        </div>\r\n                      </Card>\r\n\r\n                      <Card title=\"Your Earnings\">\r\n                        <div className=\"flex flex-col pt-8 px-2\">\r\n                          <div className=\"text-center pb-8\">\r\n                            <span className=\"text-white text-5xl\">\r\n                              {parseFloat(\r\n                                totalRewards / 1000000000000000000\r\n                              ).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex flex-row justify-center\">\r\n                            <Button\r\n                              type=\"submit\"\r\n                              className=\"flex flex-row items-center justify-center w-48\"\r\n                              onClick={() => withdrawEarnings()}\r\n                            >\r\n                              {withdrawLoading ? (\r\n                                <Spinner size={30} />\r\n                              ) : (\r\n                                <>\r\n                                  <img\r\n                                    src=\"/images/unlocked.svg\"\r\n                                    width=\"25\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                  <span className=\"w-32\">CLAIM ALL</span>{\" \"}\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </Card>\r\n\r\n                      <Card title=\"Staking\">\r\n                        <div className=\"flex flex-col pt-8 px-2\">\r\n                          <div className=\"text-center pb-4\">\r\n                            <span className=\"text-lg text-gray-400\">\r\n                              Available amount:{\" \"}\r\n                            </span>\r\n                            <span className=\"text-white text-3xl\">\r\n                              {parseInt(\r\n                                parseInt(balance) / 1000000000000000000\r\n                              )}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                            <input\r\n                              type=\"number\"\r\n                              placeholder=\"MMPRO To Stake\"\r\n                              value={amount}\r\n                              onChange={(e) => setAmount(e.target.value)}\r\n                              className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                            />\r\n                            <Button\r\n                              onClick={() => stake()}\r\n                              className=\"flex flex-row items-center w-96 justify-center\"\r\n                            >\r\n                              {stakeLoading ? (\r\n                                <Spinner size={30} />\r\n                              ) : (\r\n                                <>\r\n                                  <img\r\n                                    src=\"/images/locked.svg\"\r\n                                    width=\"25\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                  <span className=\"w-48\">APPROVE & STAKE</span>{\" \"}\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </Card>\r\n\r\n                      <Card title=\"Unstaking\">\r\n                        <div className=\"flex flex-col pt-8 px-2\">\r\n                          <div className=\"text-center pb-4\">\r\n                            <span className=\"text-lg text-gray-400\">\r\n                              Available to unstake:{\" \"}\r\n                            </span>\r\n                            <span className=\"text-white text-3xl\">\r\n                              {(\r\n                                parseFloat(stakedByUser) / 1000000000000000000\r\n                              ).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                            <select\r\n                              value={optionsState}\r\n                              onChange={onSelectChanged}\r\n                              className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                            >\r\n                              {unstakeList.map((unstake) => (\r\n                                <option key={unstake.id} value={unstake.id}>\r\n                                  {parseFloat(unstake.amount).toFixed(2)}\r\n                                  {/* {unstake.amount} */}\r\n                                </option>\r\n                              ))}\r\n                              ;\r\n                            </select>\r\n                            {/* <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Unstake\"\r\n                      value={unstakeAmount}\r\n                      onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    /> */}\r\n                            <Button\r\n                              onClick={() => unstake()}\r\n                              className=\"flex flex-row items-center w-48 justify-center\"\r\n                            >\r\n                              {unstakeLoading ? (\r\n                                <Spinner size={30} />\r\n                              ) : (\r\n                                <>\r\n                                  <img\r\n                                    src=\"/images/unlocked.svg\"\r\n                                    width=\"25\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                  <span className=\"w-36\">UNSTAKE ALL</span>\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </Card>\r\n                    </div>\r\n                  )}\r\n                {initLoading === false && tabIndex === 2 && (\r\n                  <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10 w-full\">\r\n                    <Card title=\"Your / Total Staked MMPRO\">\r\n                      <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                        <div className=\"text-center\">\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            Yours\r\n                          </span>\r\n                          <span className=\"text-white text-5xl\">\r\n                            {parseFloat(stakedByUser).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                          <br />\r\n                          {/* <span className=\"text-white text-2xl ml-2\">\r\n                            Total\r\n                          </span>\r\n                          <span className=\"text-white text-5xl\">\r\n                            {parseFloat(totalStaked).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span> */}\r\n                        </div>\r\n                        {/* <div className=\"text-center\">\r\n                          {(\r\n                            parseFloat(\r\n                              parseFloat(totalStaked) / parseFloat(balance)\r\n                            ) * 100\r\n                          ).toFixed(5)}\r\n                          %\r\n                        </div>\r\n                        <div className=\"text-center\">of total supply</div> */}\r\n                      </div>\r\n                    </Card>\r\n\r\n                    <Card title=\"Your Earnings\">\r\n                      <div className=\"flex flex-col pt-8 px-2\">\r\n                        <div className=\"text-center pb-8\">\r\n                          <span className=\"text-white text-5xl\">\r\n                            {parseFloat(\r\n                              totalRewards / 1000000000000000000\r\n                            ).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"flex flex-row justify-center\">\r\n                          <Button\r\n                            type=\"submit\"\r\n                            className=\"flex flex-row items-center justify-center w-48\"\r\n                            onClick={() => withdrawEarnings()}\r\n                          >\r\n                            {withdrawLoading ? (\r\n                              <Spinner size={30} />\r\n                            ) : (\r\n                              <>\r\n                                <img\r\n                                  src=\"/images/unlocked.svg\"\r\n                                  width=\"25\"\r\n                                  alt=\"\"\r\n                                />\r\n                                <span className=\"w-32\">CLAIM ALL</span>{\" \"}\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n\r\n                    <Card title=\"Staking\">\r\n                      <div className=\"flex flex-col pt-8 px-2\">\r\n                        <div className=\"text-center pb-4\">\r\n                          <span className=\"text-lg text-gray-400\">\r\n                            Available amount:{\" \"}\r\n                          </span>\r\n                          <span className=\"text-white text-3xl\">\r\n                            {parseInt(parseInt(balance) / 1000000000000000000)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"rounded-md border-2 border-primary p-2 my-2 flex justify-between items-center\">\r\n                          <select\r\n                            value={stakingOptionState}\r\n                            onChange={onStakeOptionSelectChanged}\r\n                            className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                          >\r\n                            {fixedStakingOption.map((option, index) => (\r\n                              <option key={index} value={index}>\r\n                                Option {index + 1} :\r\n                                {parseFloat(option.periodInDays).toFixed(2)}\r\n                              </option>\r\n                            ))}\r\n                            ;\r\n                          </select>\r\n                        </div>\r\n                        <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                          <input\r\n                            type=\"number\"\r\n                            placeholder=\"MMPRO To Stake\"\r\n                            value={amount}\r\n                            onChange={(e) => setAmount(e.target.value)}\r\n                            className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                          />\r\n                          <Button\r\n                            onClick={() => fixedStake()}\r\n                            className=\"flex flex-row items-center w-96 justify-center\"\r\n                          >\r\n                            {stakeLoading ? (\r\n                              <Spinner size={30} />\r\n                            ) : (\r\n                              <>\r\n                                <img\r\n                                  src=\"/images/locked.svg\"\r\n                                  width=\"25\"\r\n                                  alt=\"\"\r\n                                />\r\n                                <span className=\"w-48\">APPROVE & STAKE</span>{\" \"}\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n\r\n                    <Card title=\"Unstaking\">\r\n                      <div className=\"flex flex-col pt-8 px-2\">\r\n                        <div className=\"text-center pb-4\">\r\n                          <span className=\"text-lg text-gray-400\">\r\n                            Available to unstake:{\" \"}\r\n                          </span>\r\n                          <span className=\"text-white text-3xl\">\r\n                            {(\r\n                              parseFloat(stakedByUser) / 1000000000000000000\r\n                            ).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                          <select\r\n                            value={optionsState}\r\n                            onChange={onSelectChanged}\r\n                            className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                          >\r\n                            {unstakeList.map((unstake) => (\r\n                              <option key={unstake.id} value={unstake.id}>\r\n                                {parseFloat(unstake.amount).toFixed(2)}\r\n                                {/* {unstake.amount} */}\r\n                              </option>\r\n                            ))}\r\n                            ;\r\n                          </select>\r\n                          {/* <input\r\n                        type=\"number\"\r\n                        placeholder=\"MMPRO To Unstake\"\r\n                        value={unstakeAmount}\r\n                        onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                        className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                      /> */}\r\n                          <Button\r\n                            onClick={() => unstake()}\r\n                            className=\"flex flex-row items-center w-48 justify-center\"\r\n                          >\r\n                            {unstakeLoading ? (\r\n                              <Spinner size={30} />\r\n                            ) : (\r\n                              <>\r\n                                <img\r\n                                  src=\"/images/unlocked.svg\"\r\n                                  width=\"25\"\r\n                                  alt=\"\"\r\n                                />\r\n                                <span className=\"w-36\">UNSTAKE ALL</span>\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n                  </div>\r\n                )}\r\n                {initLoading && (\r\n                  <div className=\"my-12\">\r\n                    <Spinner color=\"white\" size={100} />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };\n","export const getFlexibleStakingAddress = () => {\r\n  return \"0xb30578c103Aa44450dE021C87083Dbd8e96102A2\";\r\n};\r\n\r\nexport const getFixedStakingAddress = () => {\r\n  return \"0x99EC000A191f93EE772cBDA0c7440Cf4847781E0\";\r\n};\r\n\r\nexport const getBUSDAddress = () => {\r\n  return \"0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7\";\r\n};\r\n\r\nexport const getMMProAddress = () => {\r\n  return \"0xa8892B044eCE158cb4869B59F1972Fa01Aae6D2E\";\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport StakingPage from \"./pages/StakingPage\";\r\n\r\nconst App = () => {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <StakingPage />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"./styles/tailwind.css\";\r\nimport \"./styles/index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}