{"version":3,"sources":["components/common/Button.js","components/common/Modal.js","hooks/useOnClickOutside.js","components/common/Card.js","components/common/Spinner.js","components/Header.js","components/Footer.js","hooks/useContracts.js","utils/getRpcUrl.js","pages/StakingPage.js","utils.js","utils/getAddress.js","App.js","index.js"],"names":["color","bgColor","showBorder","onClick","className","children","uppercase","cx","Modal","onClose","title","ref","useRef","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","querySelector","classList","remove","style","backgroundColor","width","height","top","left","zIndex","minWidth","maxWidth","noLine","Spinner","animationDuration","size","borderWidth","borderTopColor","borderBottomColor","defaultProps","Header","href","src","alt","rel","RPC_URL","getRpcUrl","stakeTokenDataList","Web3","providers","HttpProvider","timeout","name","abi","MMPRO","addr","img","BUSD","HomePage","props","useState","loading","setLoading","initLoading","setInitLoading","stakeLoading","setStakeLoading","unstakeLoading","setUnstakeLoading","withdrawLoading","setWithdrawLoading","error","setError","web3","setWeb3","accounts","setAccounts","flexibleStakeContract","setFlexibleStakeContract","Array","wishStakeList","setWishStakeList","balance","setBalance","totalStaked","setTotalStaked","stakedByUser","setStakedByUser","unstakeList","setUnstakeList","totalRewards","setTotalRewards","amount","setAmount","showModal","setShowModal","optionsState","setOptionsState","curStakeTokenID","setCurStakeTokenID","curStakeTokenInfo","setCurStakeTokenInfo","curStakeTokenContract","setCurStakeTokenContract","stakeTokenBoxList","setStakeTokenBoxList","init","a","isReady","Promise","resolve","reject","window","ethereum","enable","console","log","provider","eth","net","getId","tempWishStakeList","forEach","stakeToken","tempStakeToken","Contract","push","tempflexibleStake","FlexibleStake","tempStakeList","i","length","stakeTokenInfo","methods","tokenStakeInfo","call","id","getAccounts","initBalance","balanceOf","tmpBalance","getUserStakes","stakedByUserArray","sumOfStaked","stakedByUserIndex","parseInt","unstakeLists","sumTotalRewards","calcRewardsByIndex","rewards","on","updateAll","all","updateAccountBalance","updateTotalStaked","updateStakedByUser","updateTotalRewards","claimable","withdrawable","actual","arg","fromExponential","allowance","approve","send","from","stake","code","parseFloat","withdraw","_userStake","count","claimRewards","initData","triggerAlreadyInjectedWeb3","Button","Card","map","stakeTokenBox","index","key","handleSelectCurStake","toFixed","type","withdrawEarnings","placeholder","value","onChange","e","unstake","Footer","App","path","exact","StakingPage","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.9b550015.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nexport default ({\r\n  color = \"white\",\r\n  bgColor = \"primary\",\r\n  showBorder = false,\r\n  onClick,\r\n  className,\r\n  children,\r\n  uppercase = true,\r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={cx(\r\n        className,\r\n        \"rounded-md px-4 py-2 mx-1 font-Montserrat-ExtraBold\",\r\n        uppercase ? \"uppercase\" : \"\",\r\n        showBorder ? \"border\" : \"\",\r\n        \"bg-\" + bgColor,\r\n        \"hover:bg-\" + bgColor + \"-hover\",\r\n        \"hover:border-\" + bgColor + \"-hover\",\r\n        \"text-\" + color,\r\n        \"hover:text-\" + color + \"-hover\",\r\n        \"border-\" + color,\r\n        \"hover:border-\" + color + \"-hover\"\r\n      )}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\n\nconst Modal = ({ children, onClose, title }) => {\n  const ref = useRef(null);\n\n  const closeModal = () => {\n    document.querySelector(\"body\").classList.remove(\"overflow-hidden\");\n    onClose();\n  };\n\n  useOnClickOutside(ref, () => {\n    closeModal();\n  });\n\n  return (\n    <div\n      className=\"fixed overflow-auto flex items-center\"\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, .2)\",\n        width: \"100%\",\n        height: \"100%\",\n        top: 0,\n        left: 0,\n        zIndex: 5000,\n      }}\n    >\n      <div\n        ref={ref}\n        className=\"relative p-8 border-2 border-primary rounded-md bg-white w-full max-w-md m-auto h-custom\"\n        style={{\n          minWidth: \"300px\",\n          maxWidth: \"700px\",\n        }}\n      >\n        <div className=\"flex flex-row items-center\">\n          <div className=\"text-3xl font-bold\">{title}</div>\n        </div>\n\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useEffect } from \"react\";\n\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n","import React from \"react\";\r\n\r\nexport default ({ title, className, noLine, children }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-full rounded-lg card-bg pb-4\" + (className ? className : \"\")\r\n      }\r\n    >\r\n      <div className={`text-center font-Montserrat-ExtraBold text-white text-2xl uppercase pt-3 pb-2 ${noLine ? \"\" : \"border-b border-dashed border-white\"}`}>\r\n        {title}\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = ({ animationDuration, size, color }) => {\n  return (\n    <div\n      className=\"half-circle-spinner\"\n      style={{\n        height: `${size}px`,\n        width: `${size}px`,\n      }}\n    >\n      <div\n        className=\"circle circle-1\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderTopColor: color,\n        }}\n      />\n      <div\n        className=\"circle circle-2\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderBottomColor: color,\n        }}\n      />\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  animationDuration: 1000,\n  size: 40,\n  color: \"#2c6fa5\",\n};\n\nexport default Spinner;\n","import React, { useState } from \"react\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport cx from \"classnames\";\r\nimport { useEffect } from \"react/cjs/react.production.min\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"container px-4 mx-auto py-4\">\r\n      <div className=\"flex flex-row justify-between items-center\">\r\n        <div>\r\n          <a href=\"https://fstaking.github.io/\">\r\n            <img\r\n              src=\"/images/full-logo.png\"\r\n              width=\"180\"\r\n              className=\"cursor-pointer\"\r\n              alt=\"FStaking\"\r\n            />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"py-8\">\r\n      <footer className=\"container mx-auto px-4 flex flex-row justify-center text-center\">\r\n        <a\r\n          href=\"https://twitter.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <img src=\"/images/sm-twitter.svg\" alt=\"\" width=\"20\" />\r\n        </a>\r\n        <a\r\n          href=\"https://t.me/#\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <img src=\"/images/sm-telegram.svg\" alt=\"\" width=\"20\" />\r\n        </a>\r\n        <a\r\n          href=\"#\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <span>v 1.0.0RC3</span>\r\n        </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n","import Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nimport { getFlexibleStakingAddress } from '../utils/getAddress'\r\nimport MMPRO from '../contracts/MMPRO.json'\r\nimport FlexibleStake from '../contracts/FlexibleStake.json'\r\nimport getRpcUrl from '../utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 })\r\n\r\nexport const useWeb3 = () => {\r\n    const {\r\n        library\r\n    } = useWeb3React()\r\n    return new Web3(library.currentProvider || httpProvider)\r\n}\r\n\r\nconst useContract = (abi, address) => {\r\n    const {\r\n        library\r\n    } = useWeb3React()\r\n    const web3 = new Web3(library.currentProvider || httpProvider)\r\n    return new web3.eth.Contract(abi, address)\r\n}\r\n\r\nexport const useFlexibleStaking = _ => {\r\n    const abi = FlexibleStake.abi\r\n    return useContract(abi, getFlexibleStakingAddress())\r\n}\r\n","const getRpcUrl = () => {\r\n    return 'https://data-seed-prebsc-1-s1.binance.org:8545/'\r\n}\r\n\r\nexport default getRpcUrl\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../components/common/Button\";\r\nimport Modal from \"../components/common/Modal\";\r\nimport Card from \"../components/common/Card\";\r\nimport Spinner from \"../components/common/Spinner\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport FlexibleStake from \"../contracts/FlexibleStake.json\";\r\nimport MMPRO from \"../contracts/MMPRO.json\";\r\nimport BUSD from \"../contracts/Busd.json\";\r\nimport fromExponential from \"from-exponential\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport StakingList from \"../components/StakingList\";\r\nimport { getFlexibleStakingAddress } from \"../utils/getAddress\";\r\n\r\nconst stakeTokenDataList = [\r\n  {\r\n    name: \"MMPro\",\r\n    abi: MMPRO.abi,\r\n    addr: \"0xa8892B044eCE158cb4869B59F1972Fa01Aae6D2E\",\r\n    img: \"/images/mmpro.png\",\r\n  },\r\n  {\r\n    name: \"Busd\",\r\n    abi: BUSD.abi,\r\n    addr: \"0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7\",\r\n    img: \"/images/busd.png\",\r\n  },\r\n];\r\nconst HomePage = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [initLoading, setInitLoading] = useState(false);\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [web3, setWeb3] = useState();\r\n  const [accounts, setAccounts] = useState();\r\n  const [flexibleStakeContract, setFlexibleStakeContract] = useState();\r\n  // const [stakeToken, setStakeToken] = useState();\r\n  // const [usersStake, setUserStake] = useState();\r\n  // const [freeAmount, setFreeAmount] = useState();\r\n  // const [totalSupply, setTotalSupply] = useState();\r\n\r\n  const [wishStakeList, setWishStakeList] = useState(Array);\r\n\r\n  const [balance, setBalance] = useState(0);\r\n  const [totalStaked, setTotalStaked] = useState();\r\n  const [stakedByUser, setStakedByUser] = useState(0);\r\n  const [unstakeList, setUnstakeList] = useState([]);\r\n  // const [unstakeAmount, setUnstakeAmount] = useState(0);\r\n  const [totalRewards, setTotalRewards] = useState();\r\n  const [amount, setAmount] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [optionsState, setOptionsState] = useState(0);\r\n  const [curStakeTokenID, setCurStakeTokenID] = useState(-1);\r\n  const [curStakeTokenInfo, setCurStakeTokenInfo] = useState();\r\n  const [curStakeTokenContract, setCurStakeTokenContract] = useState();\r\n  const [stakeTokenBoxList, setStakeTokenBoxList] = useState(Array);\r\n\r\n  const init = async () => {\r\n    if (isReady()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    let web3;\r\n    try {\r\n      web3 = await initWeb3();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const networkId = await web3.eth.net.getId();\r\n    if (networkId !== 97) {\r\n      setError(\"Please connect BSC Testnet account\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    let tempWishStakeList = [];\r\n    stakeTokenDataList.forEach((stakeToken) => {\r\n      const tempStakeToken = new web3.eth.Contract(\r\n        stakeToken[\"abi\"],\r\n        stakeToken[\"addr\"]\r\n      );\r\n      tempWishStakeList.push(tempStakeToken);\r\n    });\r\n\r\n    const tempflexibleStake = new web3.eth.Contract(\r\n      FlexibleStake.abi,\r\n      \"0xb30578c103Aa44450dE021C87083Dbd8e96102A2\"\r\n    );\r\n    let tempStakeList = [];\r\n    for (var i = 0; i < stakeTokenDataList.length; i++) {\r\n      let stakeTokenInfo = {};\r\n      stakeTokenInfo[\"name\"] = stakeTokenDataList[i][\"name\"];\r\n      stakeTokenInfo[\"img\"] = stakeTokenDataList[i][\"img\"];\r\n      stakeTokenInfo[\"addr\"] = stakeTokenDataList[i][\"addr\"];\r\n      stakeTokenInfo[\"TVL\"] = (\r\n        await tempflexibleStake.methods\r\n          .tokenStakeInfo(stakeTokenDataList[i][\"addr\"])\r\n          .call()\r\n      )[2];\r\n      tempStakeList.push({ ...stakeTokenInfo, id: i });\r\n    }\r\n    setStakeTokenBoxList(tempStakeList);\r\n    setWeb3(web3);\r\n    setAccounts(await web3.eth.getAccounts());\r\n    setWishStakeList(tempWishStakeList);\r\n    setFlexibleStakeContract(tempflexibleStake);\r\n    setLoading(false);\r\n  };\r\n  console.log(wishStakeList);\r\n\r\n  const initBalance = async () => {\r\n    const tmpBalance = await wishStakeList[curStakeTokenID].methods\r\n      .balanceOf(accounts[0])\r\n      .call();\r\n    const stakedByUserArray = await flexibleStakeContract.methods\r\n      .getUserStakes(accounts[0])\r\n      .call();\r\n    let sumOfStaked = 0;\r\n    stakedByUserArray.forEach((stakedByUserIndex) => {\r\n      if (\r\n        stakedByUserIndex.stakeToken === stakeTokenBoxList[curStakeTokenID].addr\r\n      ) {\r\n        sumOfStaked += parseInt(stakedByUserIndex.amount);\r\n      }\r\n    });\r\n\r\n    let unstakeLists = [];\r\n    let sumTotalRewards = 0;\r\n    for (let i = 0; i < stakedByUserArray.length; i++) {\r\n      const rewards = await flexibleStakeContract.methods\r\n        .calcRewardsByIndex(accounts[0], i)\r\n        .call();\r\n      sumTotalRewards += parseInt(rewards);\r\n      unstakeLists.push({ id: i, amount: stakedByUserArray[i].amount });\r\n    }\r\n    // setTotalSupply(totalSupply);\r\n    // setFreeAmount(freeAmount);\r\n    // setStakeToken(stakeToken);\r\n    // setBalance(balance);\r\n    // setTotalStaked(totalStaked);\r\n    setBalance(tmpBalance);\r\n    setStakedByUser(sumOfStaked);\r\n    setTotalRewards(sumTotalRewards);\r\n    setUnstakeList(unstakeLists);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      // debugger;\r\n      if (accounts.length > 0) {\r\n        setAccounts(accounts);\r\n      } else {\r\n        setAccounts(null);\r\n      }\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n  console.log(balance);\r\n  const isReady = () => {\r\n    return !!flexibleStakeContract && !!web3 && !!accounts;\r\n  };\r\n\r\n  async function updateAll() {\r\n    await Promise.all([\r\n      updateAccountBalance(),\r\n      updateTotalStaked(),\r\n      updateStakedByUser(),\r\n      updateTotalRewards(),\r\n    ]);\r\n  }\r\n\r\n  async function updateStakedByUser() {\r\n    if (flexibleStakeContract) {\r\n      let sumOfStaked = 0;\r\n      const stakedByUserArray = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      stakedByUserArray.forEach((stakedByUserIndex) => {\r\n        if (\r\n          stakedByUserIndex.stakeToken ===\r\n          stakeTokenBoxList[curStakeTokenID][\"addr\"]\r\n        ) {\r\n          sumOfStaked =\r\n            parseInt(sumOfStaked) + parseInt(stakedByUserIndex.amount);\r\n        }\r\n      });\r\n      setStakedByUser(sumOfStaked);\r\n      return sumOfStaked;\r\n    }\r\n  }\r\n\r\n  async function updateTotalRewards() {\r\n    if (flexibleStakeContract) {\r\n      const stakedByUserArray = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      let sumTotalRewards = 0;\r\n      let unstakeLists = [];\r\n      for (let i = 0; i < stakedByUserArray.length; i++) {\r\n        const rewards = await flexibleStakeContract.methods\r\n          .calcRewardsByIndex(accounts[0], i)\r\n          .call();\r\n        if (rewards.claimable) {\r\n          sumTotalRewards =\r\n            parseInt(sumTotalRewards) + parseInt(rewards.rewards);\r\n        }\r\n\r\n        if (rewards.withdrawable) {\r\n          unstakeLists.push({ id: i, amount: stakedByUserArray[i].amount });\r\n        }\r\n      }\r\n      setTotalRewards(sumTotalRewards);\r\n      setUnstakeList(unstakeLists);\r\n      // return sumTotalRewards;\r\n    }\r\n  }\r\n\r\n  async function updateAccountBalance() {\r\n    if (curStakeTokenContract) {\r\n      const balance = await curStakeTokenContract.methods\r\n        .balanceOf(accounts[0])\r\n        .call();\r\n      setBalance(balance);\r\n      return balance;\r\n    }\r\n  }\r\n\r\n  async function updateTotalStaked() {\r\n    if (flexibleStakeContract) {\r\n      const totalStaked = (\r\n        await flexibleStakeContract.methods\r\n          .tokenStakeInfo(stakeTokenBoxList[curStakeTokenID][\"addr\"])\r\n          .call()\r\n      )[2];\r\n\r\n      setTotalStaked(totalStaked);\r\n      return totalStaked;\r\n    }\r\n  }\r\n\r\n  console.log(totalStaked);\r\n\r\n  async function stake() {\r\n    setStakeLoading(true);\r\n    const actual = amount * 10 ** 18;\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      const allowance = await curStakeTokenContract.methods\r\n        .allowance(accounts[0], getFlexibleStakingAddress())\r\n        .call();\r\n      if (allowance === \"0\") {\r\n        await curStakeTokenContract.methods\r\n          .approve(getFlexibleStakingAddress(), arg)\r\n          .send({ from: accounts[0] });\r\n      }\r\n      console.log(\r\n        curStakeTokenInfo[\"addr\"],\r\n        amount,\r\n        allowance,\r\n        allowance === \"0\"\r\n      );\r\n      await flexibleStakeContract.methods\r\n        .stake(curStakeTokenInfo[\"addr\"], amount)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function unstake() {\r\n    console.log(optionsState);\r\n    if (parseFloat(stakedByUser) === 0) {\r\n      console.error(\"You don't have any staked LEADs yet!\");\r\n      return;\r\n    }\r\n    setUnstakeLoading(true);\r\n    try {\r\n      // const _userStake = await flexibleStake.methods\r\n      //   .getUserStakes(accounts[0])\r\n      //   .call();\r\n      // const count = _userStake.length;\r\n      await flexibleStakeContract.methods\r\n        .withdraw(optionsState)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setUnstakeLoading(false);\r\n  }\r\n\r\n  async function withdrawEarnings() {\r\n    if (parseFloat(totalRewards) === 0) {\r\n      console.error(\"No earnings yet!\");\r\n      return;\r\n    }\r\n    setWithdrawLoading(true);\r\n    try {\r\n      const _userStake = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      const count = _userStake.length;\r\n      for (let i = 0; i < count; i++) {\r\n        await flexibleStakeContract.methods\r\n          .claimRewards(i)\r\n          .send({ from: accounts[0] });\r\n      }\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setWithdrawLoading(false);\r\n  }\r\n\r\n  const handleSelectCurStake = (index) => {\r\n    setCurStakeTokenID(index);\r\n  };\r\n\r\n  function onSelectChanged(event) {\r\n    setOptionsState(event.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const initData = async () => {\r\n      if (isReady()) {\r\n        setInitLoading(true);\r\n        setCurStakeTokenContract(wishStakeList[curStakeTokenID]);\r\n        setCurStakeTokenInfo(stakeTokenBoxList[curStakeTokenID]);\r\n        await initBalance();\r\n        await updateAll();\r\n        setInitLoading(false);\r\n      }\r\n    };\r\n    initData();\r\n  }, [curStakeTokenID, web3, accounts]);\r\n\r\n  useEffect(() => {\r\n    const triggerAlreadyInjectedWeb3 = async () => {\r\n      if (window.ethereum) {\r\n        await init();\r\n      }\r\n    };\r\n    triggerAlreadyInjectedWeb3();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-full overflow-hidden main-gradient\">\r\n      {showModal && (\r\n        <Modal title=\"\" onClose={() => setShowModal(false)}>\r\n          <div className=\"text-2xl mb-2\">\r\n            Error! Your transaction has been reverted!\r\n          </div>\r\n          <div>1. Please check your account and retry again...</div>\r\n          <div>2. Your referrer's address is a registered member if any</div>\r\n\r\n          <div className=\"my-2\">\r\n            Thanks for your support and feel free to{\" \"}\r\n            <a\r\n              href=\"https://www.leadwallet.io/contact\"\r\n              className=\"text-blue-500\"\r\n            >\r\n              contact us\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"flex flex-row justify-center\">\r\n            <Button onClick={() => setShowModal(false)}>Close</Button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <div className=\"relative w-full z-30\">\r\n        <Header />\r\n\r\n        <div className=\"container mx-auto pb-18 px-4 force-height\">\r\n          {!accounts && (\r\n            <div className=\"w-full py-6 text-center\">\r\n              {/* <dov className=\"flex flex-row justify-around\"> */}\r\n              <div className=\"flex items-center justify-center flex-row w-full mb-24 mt-6\">\r\n                <div className=\"text-left\">\r\n                  <p className=\"text-6xl mb-2 font-semibold\">Launchpad</p>\r\n                  <p className=\"text-2xl mb-2 font-light\">\r\n                    {\" \"}\r\n                    Connect your wallet &amp; Participate in IDO on MMPRO\r\n                    Launchpad. For allocation you need to have MMPRO token.{\" \"}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <div className=\"transparentCard justify-space-between w-80 ml-13\">\r\n                    <h1> MMPRO price</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 0.1321</p>\r\n                      <h1> USD </h1>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"transparentCard justify-space-between w-80 ml-13\">\r\n                    <h1> MMPRO marketcap</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 13.1m</p>\r\n                      <h1> USD </h1>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"transparentCard justify-space-between w-80 ml-13\">\r\n                    <h1> MMPRO supply</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 99.50m</p>\r\n                      <h1> MMPRO </h1>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <Button\r\n                className=\"w-full md:w-2/5 text-2xl flex flex-row justify-center mx-auto\"\r\n                uppercase={false}\r\n                onClick={async () => await init()}\r\n              >\r\n                {loading && <Spinner color=\"white\" size={40} />}\r\n                {!loading && (error !== \"\" ? error : \"CONNECT METAMASK WALLET\")}\r\n              </Button>\r\n\r\n              <div className=\"text-white text-center mt-6 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-bold\">\r\n                <h1>Stake Your Token</h1>\r\n              </div>\r\n              <div className=\"w-full md:w-3/6 justify-center mx-auto mt-6\">\r\n                <Card title=\"Rules\">\r\n                  <div className=\"flex flex-col pt-8 pb-4 text-white text-center\">\r\n                    <ul>\r\n                      <li>1. Connect your MetaMask wallet to participate</li>\r\n                      <li>\r\n                        2. Stake tokens and earn daily returns from allocated\r\n                        pool\r\n                      </li>\r\n                      <li>3. Withdraw earned rewards anytime</li>\r\n                      <li>4. Unstake tokens anytime</li>\r\n                      <li>5. Earn extra rewards by referring new members</li>\r\n                    </ul>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {accounts && stakeTokenBoxList.length > 0 && curStakeTokenID === -1 && (\r\n            <div className=\"grid grid-col-1 gap-6 mt-10\">\r\n              <Card title=\"Please select one\">\r\n                {stakeTokenBoxList.map((stakeTokenBox, index) => (\r\n                  <div className=\"transparentCard w-auto mx-12\" key={index}>\r\n                    <div className=\"flex justify-start\">\r\n                      <img\r\n                        src={stakeTokenBox[\"img\"]}\r\n                        width=\"40\"\r\n                        alt={stakeTokenBox[\"name\"]}\r\n                      />\r\n                      <div className=\"flex flex-col mx-4\">\r\n                        <div className=\"flex flex-row justify-between\">\r\n                          <div>Name: </div>\r\n                          <div className=\"font-extrabold\">\r\n                            {stakeTokenBox[\"name\"]}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex flex-row justify-between\">\r\n                          <div>TVL: </div>\r\n                          <div className=\"font-extrabold\">\r\n                            {stakeTokenBox[\"TVL\"]} USD\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <Button onClick={() => handleSelectCurStake(index)}>\r\n                      Stake\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </Card>\r\n            </div>\r\n          )}\r\n          {accounts && curStakeTokenID !== -1 && initLoading === false && (\r\n            <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10\">\r\n              <Card title=\"Your / Total Staked MMPRO\">\r\n                <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                  <div className=\"text-center\">\r\n                    <span className=\"text-white text-2xl ml-2\">Yours</span>\r\n                    <span className=\"text-white text-5xl\">\r\n                      {parseFloat(stakedByUser).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                    <br />\r\n                    <span className=\"text-white text-2xl ml-2\">Total</span>\r\n                    <span className=\"text-white text-5xl\">\r\n                      {parseFloat(totalStaked).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    {(\r\n                      parseFloat(\r\n                        parseFloat(totalStaked) / parseFloat(balance)\r\n                      ) * 100\r\n                    ).toFixed(5)}\r\n                    %\r\n                  </div>\r\n                  <div className=\"text-center\">of total supply</div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Your Earnings\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-8\">\r\n                    <span className=\"text-white text-5xl\">\r\n                      {(parseFloat(totalRewards) / 1000000000000000000).toFixed(\r\n                        2\r\n                      )}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"flex flex-row justify-center\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\"flex flex-row items-center justify-center w-48\"\r\n                      onClick={() => withdrawEarnings()}\r\n                    >\r\n                      {withdrawLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/unlocked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-32\">CLAIM ALL</span>{\" \"}\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Staking\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Available amount:{\" \"}\r\n                    </span>\r\n                    <span className=\"text-white text-3xl\">\r\n                      {parseInt(parseInt(balance) / 1000000000000000000)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Stake\"\r\n                      value={amount}\r\n                      onChange={(e) => setAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    />\r\n                    <Button\r\n                      onClick={() => stake()}\r\n                      className=\"flex flex-row items-center w-96 justify-center\"\r\n                    >\r\n                      {stakeLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/locked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-48\">APPROVE & STAKE</span>{\" \"}\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Unstaking\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Available to unstake:{\" \"}\r\n                    </span>\r\n                    <span className=\"text-white text-3xl\">\r\n                      {(parseFloat(stakedByUser) / 1000000000000000000).toFixed(\r\n                        2\r\n                      )}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                    <select\r\n                      value={optionsState}\r\n                      onChange={onSelectChanged}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    >\r\n                      {unstakeList.map((unstake) => (\r\n                        <option key={unstake.id} value={unstake.id}>\r\n                          {(\r\n                            parseFloat(unstake.amount) / 1000000000000000000\r\n                          ).toFixed(2)}\r\n                          {/* {unstake.amount} */}\r\n                        </option>\r\n                      ))}\r\n                      ;\r\n                    </select>\r\n                    {/* <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Unstake\"\r\n                      value={unstakeAmount}\r\n                      onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    /> */}\r\n                    <Button\r\n                      onClick={() => unstake()}\r\n                      className=\"flex flex-row items-center w-48 justify-center\"\r\n                    >\r\n                      {unstakeLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/unlocked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-36\">UNSTAKE ALL</span>\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            </div>\r\n          )}\r\n          {initLoading === true && (\r\n            <div className=\"flex justify-center mt-12\">\r\n              <Spinner color=\"white\" size={100} />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };\n","export const getFlexibleStakingAddress = () => {\r\n    return '0xb30578c103Aa44450dE021C87083Dbd8e96102A2'\r\n}\r\n\r\nexport const getBUSDAddress = () => {\r\n    return '0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7'\r\n}\r\n\r\nexport const getMMProAddress = () => {\r\n    return '0xa8892B044eCE158cb4869B59F1972Fa01Aae6D2E'\r\n}","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport StakingPage from \"./pages/StakingPage\";\r\n\r\nconst App = () => {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <StakingPage />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"./styles/tailwind.css\";\r\nimport \"./styles/index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}