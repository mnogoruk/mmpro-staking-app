{"version":3,"sources":["components/common/Button.js","components/common/Modal.js","hooks/useOnClickOutside.js","components/common/Card.js","components/common/Spinner.js","pages/StakingPage.js","utils.js","App.js","index.js"],"names":["color","bgColor","showBorder","onClick","className","children","uppercase","cx","Modal","onClose","title","ref","useRef","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","querySelector","classList","remove","style","backgroundColor","width","height","top","left","zIndex","minWidth","maxWidth","noLine","Spinner","animationDuration","size","borderWidth","borderTopColor","borderBottomColor","defaultProps","HomePage","props","useState","loading","setLoading","stakeLoading","setStakeLoading","withdrawLoading","setWithdrawLoading","error","setError","web3","setWeb3","accounts","setAccounts","flexibleStake","setFlexibleStake","mmPROToken","setMmPROToken","balance","setBalance","totalStaked","setTotalStaked","stakedByUser","setStakedByUser","totalRewards","setTotalRewards","amount","setAmount","showModal","setShowModal","init","a","isReady","Promise","resolve","reject","window","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","getAccounts","net","getId","Contract","MMPRO","abi","methods","balanceOf","call","FlexibleStake","getUserStakes","stakedByUserArray","sumOfStaked","forEach","stakedByUserIndex","parseInt","sumTotalRewards","i","length","calcRewardsByIndex","rewards","claimable","on","updateAll","all","updateAccountBalance","updateTotalStaked","updateStakedByUser","updateTotalRewards","_userStake","count","actual","arg","fromExponential","approve","send","from","stake","code","parseFloat","claimRewards","selectedAddress","networkVersion","triggerAlreadyInjectedWeb3","href","Button","src","alt","textAlign","marginTop","id","to","Card","toFixed","type","placeholder","value","onChange","e","withdrawEarnings","App","path","exact","StakingPage","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename"],"mappings":"8zUAGe,cAQR,IAAD,IAPJA,aAOI,MAPI,QAOJ,MANJC,eAMI,MANM,UAMN,MALJC,kBAKI,SAJJC,EAII,EAJJA,QACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SAEI,IADJC,iBACI,SACJ,OACE,4BACEH,QAASA,EACTC,UAAWG,IACTH,EACA,sDACAE,EAAY,YAAc,GAC1BJ,EAAa,SAAW,GACxB,MAAQD,EACR,YAAcA,EAAU,SACxB,gBAAkBA,EAAU,SAC5B,QAAUD,EACV,cAAgBA,EAAQ,SACxB,UAAYA,EACZ,gBAAkBA,EAAQ,WAG3BK,IC1BP,IA0CeG,EA1CD,SAAC,GAAkC,IAAhCH,EAA+B,EAA/BA,SAAUI,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC5BC,EAAMC,iBAAO,MAWnB,OCba,SAA2BD,EAAKE,GAC7CC,qBAAU,WACR,IAAMC,EAAW,SAACC,GAEXL,EAAIM,UAAWN,EAAIM,QAAQC,SAASF,EAAMG,SAI/CN,EAAQG,IAMV,OAHAI,SAASC,iBAAiB,YAAaN,GACvCK,SAASC,iBAAiB,aAAcN,GAEjC,WACLK,SAASE,oBAAoB,YAAaP,GAC1CK,SAASE,oBAAoB,aAAcP,MAE5C,CAACJ,EAAKE,IDTTU,CAAkBZ,GAAK,WAJrBS,SAASI,cAAc,QAAQC,UAAUC,OAAO,mBAChDjB,OAQA,yBACEL,UAAU,wCACVuB,MAAO,CACLC,gBAAiB,oBACjBC,MAAO,OACPC,OAAQ,OACRC,IAAK,EACLC,KAAM,EACNC,OAAQ,MAGV,yBACEtB,IAAKA,EACLP,UAAU,2FACVuB,MAAO,CACLO,SAAU,QACVC,SAAU,UAGZ,yBAAK/B,UAAU,8BACb,yBAAKA,UAAU,sBAAsBM,IAGtCL,KErCM,cAA6C,IAA1CK,EAAyC,EAAzCA,MAAON,EAAkC,EAAlCA,UAAWgC,EAAuB,EAAvBA,OAAQ/B,EAAe,EAAfA,SAC1C,OACE,yBACED,UACE,kCAAoCA,GAAwB,KAG9D,yBAAKA,UAAS,wFAAmFgC,EAAS,GAAK,wCAC5G1B,GAEFL,ICTDgC,G,OAAU,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,KAAMvC,EAAY,EAAZA,MAC1C,OACE,yBACEI,UAAU,sBACVuB,MAAO,CACLG,OAAO,GAAD,OAAKS,EAAL,MACNV,MAAM,GAAD,OAAKU,EAAL,QAGP,yBACEnC,UAAU,kBACVuB,MAAO,CACLa,YAAY,GAAD,OAAKD,EAAO,GAAZ,MACXD,kBAAkB,GAAD,OAAKA,EAAL,MACjBG,eAAgBzC,KAGpB,yBACEI,UAAU,kBACVuB,MAAO,CACLa,YAAY,GAAD,OAAKD,EAAO,GAAZ,MACXD,kBAAkB,GAAD,OAAKA,EAAL,MACjBI,kBAAmB1C,QAO7BqC,EAAQM,aAAe,CACrBL,kBAAmB,IACnBC,KAAM,GACNvC,MAAO,WAGMqC,Q,4CCigBAO,EA7hBE,SAACC,GAAW,IAAD,EAEIC,oBAAS,GAFb,mBAEnBC,EAFmB,KAEVC,EAFU,OAGcF,oBAAS,GAHvB,mBAGnBG,EAHmB,KAGLC,EAHK,OAIoBJ,oBAAS,GAJ7B,mBAInBK,EAJmB,KAIFC,EAJE,OAKAN,mBAAS,IALT,mBAKnBO,EALmB,KAKZC,EALY,OAMFR,qBANE,mBAMnBS,EANmB,KAMbC,EANa,OAOMV,qBAPN,mBAOnBW,EAPmB,KAOTC,EAPS,OAQgBZ,qBARhB,mBAQnBa,EARmB,KAQJC,EARI,OAaUd,qBAbV,mBAanBe,EAbmB,KAaPC,EAbO,OAcIhB,qBAdJ,mBAcnBiB,EAdmB,KAcVC,EAdU,OAeYlB,qBAfZ,mBAenBmB,EAfmB,KAeNC,GAfM,QAgBcpB,mBAAS,GAhBvB,qBAgBnBqB,GAhBmB,MAgBLC,GAhBK,SAiBctB,qBAjBd,qBAiBnBuB,GAjBmB,MAiBLC,GAjBK,SAkBExB,mBAAS,GAlBX,qBAkBnByB,GAlBmB,MAkBXC,GAlBW,SAmBQ1B,oBAAS,GAnBjB,qBAmBnB2B,GAnBmB,MAmBRC,GAnBQ,MAqBpBC,GAAI,uCAAG,gDAAAC,EAAA,0DACPC,KADO,wDAKX7B,GAAW,GALA,kBC5BN,IAAI8B,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,qBAAAJ,EAAA,0DACbK,OAAOC,SADM,wBAET3B,EAAO,IAAI4B,IAAKF,OAAOC,UAFd,kBAIPD,OAAOC,SAASE,SAJT,OAKbL,EAAQxB,GALK,gDAObyB,EAAO,EAAD,IAPO,gCASNC,OAAO1B,MACVA,EAAO0B,OAAO1B,KACpB8B,QAAQC,IAAI,2BACZP,EAAQxB,KAEFgC,EAAW,IAAIJ,IAAKK,UAAUC,aAAa,yBAC3ClC,EAAO,IAAI4B,IAAKI,GACtBF,QAAQC,IAAI,gDACZP,EAAQxB,IAjBO,yDAAZ,yDD4BM,OAQTA,EARS,8DAUT8B,QAAQhC,MAAR,MACAL,GAAW,GAXF,4CAeYO,EAAKmC,IAAIC,cAfrB,eAeLlC,EAfK,iBAgBaF,EAAKmC,IAAIE,IAAIC,QAhB1B,WAiBO,KAjBP,+BAkBTvC,EAAS,sCACTN,GAAW,GAnBF,kCAuBLa,EAAa,IAAIN,EAAKmC,IAAII,SAC9BC,EAAMC,IACN,8CAzBS,UA+BWnC,EAAWoC,QAAQC,UAAUzC,EAAS,IAAI0C,OA/BrD,eA+BLpC,EA/BK,OAiCLJ,EAAgB,IAAIJ,EAAKmC,IAAII,SACjCM,EAAcJ,IACd,8CAnCS,UAqCerC,EAAcsC,QAAQhC,cAAckC,OArCnD,eAqCLlC,EArCK,iBAsCqBN,EAAcsC,QAAQI,cAAc5C,EAAS,IAAI0C,OAtCtE,QAsCLG,EAtCK,OAuCPC,EAAc,EAClBD,EAAkBE,SAAQ,SAAAC,GACxBF,EAAcG,SAASH,GAAeG,SAASD,EAAkBlC,WAI/DoC,EAAkB,EACbC,EAAI,EA9CF,aA8CKA,EAAIN,EAAkBO,QA9C3B,kCA+CalD,EAAcsC,QAAQa,mBAAmBrD,EAAS,GAAImD,GAAGT,OA/CtE,SA+CHY,EA/CG,QAgDGC,YACVL,EAAkBD,SAASC,GAAmBD,SAASK,EAAQA,UAjDxD,QA8CmCH,IA9CnC,wBAqDXpD,EAAQD,GACRG,EAAYD,GAIZK,EAAcD,GACdG,EAAWD,GACXG,GAAeD,GACfL,EAAiBD,GACjBS,GAAgBmC,GAChBjC,GAAgBqC,GAEhB1B,OAAOC,SAAS+B,GAAG,mBAAmB,SAACxD,GAEjCA,EAASoD,OAAS,EACpBnD,EAAYD,GAEZC,EAAY,SAIhBV,GAAW,GA1EA,yDAAH,qDA6EJ6B,GAAU,WACd,QAASlB,KAAmBJ,KAAUE,GAnGd,SAoHXyD,KApHW,8EAoH1B,sBAAAtC,EAAA,sEACQE,QAAQqC,IAAI,CAIhBC,KACAC,KACAC,KACAC,OARJ,4CApH0B,+BAsIXD,KAtIW,8EAsI1B,4BAAA1C,EAAA,0DACMjB,EADN,uBAEQ4C,EAAc,EAFtB,SAGoC5C,EAAcsC,QAAQI,cAAc5C,EAAS,IAAI0C,OAHrF,qBAIsBK,SAAQ,SAAAC,GACxBF,EAAcG,SAASH,GAAeG,SAASD,EAAkBlC,WAEnEH,GAAgBmC,GAPpB,kBAQWA,GARX,4CAtI0B,+BAwKXgB,KAxKW,8EAwK1B,oCAAA3C,EAAA,0DACMjB,EADN,iCAE6BA,EAAcsC,QAAQI,cAAc5C,EAAS,IAAI0C,OAF9E,OAEUqB,EAFV,OAGUC,EAAQD,EAAWX,OACrBF,EAAkB,EACbC,EAAI,EALjB,YAKoBA,EAAIa,GALxB,kCAM4B9D,EAAcsC,QAAQa,mBAAmBrD,EAAS,GAAImD,GAAGT,OANrF,SAMYY,EANZ,QAOkBC,YACVL,EAAkBD,SAASC,GAAmBD,SAASK,EAAQA,UARvE,QAK+BH,IAL/B,8BAWItC,GAAgBqC,GAXpB,kBAYWA,GAZX,6CAxK0B,+BAwLXS,KAxLW,8EAwL1B,4BAAAxC,EAAA,0DACMf,EADN,gCAE0BA,EAAWoC,QAAQC,UAAUzC,EAAS,IAAI0C,OAFpE,cAEUpC,EAFV,OAGIC,EAAWD,GAHf,kBAIWA,GAJX,4CAxL0B,+BAgMXsD,KAhMW,8EAgM1B,4BAAAzC,EAAA,0DACMjB,EADN,gCAE8BA,EAAcsC,QAAQhC,cAAckC,OAFlE,cAEUlC,EAFV,OAGIC,GAAeD,GAHnB,kBAIWA,GAJX,4CAhM0B,oEAwM1B,8BAAAW,EAAA,6DAEE1B,GAAgB,GACVwE,EAASnD,GAAM,SAAI,GAAM,IACzBoD,EAAMC,YAAgBF,GAJ9B,kBAMU7D,EAAWoC,QACd4B,QAAQ,6CAA8CF,GACtDG,KAAK,CAAEC,KAAMtE,EAAS,KAR7B,uBAUUE,EAAcsC,QAAQ+B,MAAML,GAAKG,KAAK,CAAEC,KAAMtE,EAAS,KAVjE,wBAWUyD,KAXV,0DAaqB,OAAb,KAAIe,MACNvD,IAAa,GAEfW,QAAQhC,MAAR,MAhBJ,QAkBEH,GAAgB,GAlBlB,2DAxM0B,oEA6N1B,gCAAA0B,EAAA,yDACES,QAAQC,IAAI,oBACqB,IAA7B4C,WAAW7D,IAFjB,uBAGIgB,QAAQhC,MAAM,oBAHlB,iCAMED,GAAmB,GANrB,kBAQ6BO,EAAcsC,QAAQI,cAAc5C,EAAS,IAAI0C,OAR9E,OAQUqB,EARV,OASUC,EAAQD,EAAWX,OACzBxB,QAAQC,IAAImC,GACHb,EAAI,EAXjB,aAWoBA,EAAIa,GAXxB,kCAYY9D,EAAcsC,QAAQkC,aAAavB,GAAGkB,KAAK,CAAEC,KAAMtE,EAAS,KAZxE,QAW+BmD,IAX/B,yCAcUM,KAdV,0DAgBqB,OAAb,KAAIe,MACNvD,IAAa,GAEfW,QAAQhC,MAAR,MAnBJ,QAqBED,GAAmB,GArBrB,2DA7N0B,sBAqP1B,OA/IAtC,qBAAU,YACwB,uCAAG,sBAAA8D,EAAA,0DAC7BK,OAAOC,SADsB,oBAG7BD,OAAOC,SAASkD,iBACmB,MAAnCnD,OAAOC,SAASmD,eAJa,gCAMvB1D,KANuB,2CAAH,qDAUhC2D,KACC,IAcHxH,qBAAU,WACJ+D,MACFqC,OAED,CAACvD,EAAeE,EAAYN,EAAME,IAkHnC,yBAAKrD,UAAU,0BACZqE,IACC,kBAAC,EAAD,CAAO/D,MAAM,GAAGD,QAAS,kBAAMiE,IAAa,KAC1C,yBAAKtE,UAAU,iBAAf,8CAGA,gFACA,yFAEA,yBAAKA,UAAU,QAAf,2CAC2C,IACzC,uBAAGmI,KAAK,oCAAoCnI,UAAU,iBAAtD,eAKF,yBAAKA,UAAU,gCACb,kBAACoI,EAAD,CAAQrI,QAAS,kBAAMuE,IAAa,KAApC,WAIN,yBAAKtE,UAAU,8BACb,yBACEqI,IAAI,oBACJC,IAAI,GACJtI,UAAU,4BAEZ,yBACEqI,IAAI,oBACJC,IAAI,GACJtI,UAAU,gCAId,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,mCAGjB,yBAAKA,UAAU,wBAGb,yBAAKA,UAAU,8CACXqD,GACA,yBAAKrD,UAAU,2BACb,yBAAKuB,MAAO,CAAEgH,UAAW,SAAUC,UAAW,QAC5C,yBAAKC,GAAG,YACN,kBAAC,IAAD,CAAMA,GAAG,UAAUC,GAAG,KAAtB,8BAGJ,kBAACN,EAAD,CACEpI,UAAU,gEACVE,WAAW,EACXH,QAAO,sBAAE,sBAAAyE,EAAA,sEAAkBD,KAAlB,oFAER5B,GAAW,kBAAC,EAAD,CAAS/C,MAAM,QAAQuC,KAAM,MACvCQ,IAAsB,KAAVM,EAAeA,EAAQ,4BAGvC,yBAAKjD,UAAU,iGACb,iDAEF,yBAAKA,UAAU,+CACb,kBAAC2I,EAAD,CAAMrI,MAAM,SACV,yBAAKN,UAAU,kDACb,4BACE,8EAGA,0FAGA,kEAGA,yDAGA,mFASXqD,GACC,yBAAKrD,UAAU,8CACb,kBAAC2I,EAAD,CAAMrI,MAAM,2BACV,yBAAKN,UAAU,sCACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,4BAAhB,SACA,0BAAMA,UAAU,wBAEX8H,WAAW/D,IAAc6E,QAAQ,GAClC,MACAA,QAAQ,IAEZ,0BAAM5I,UAAU,4BAAhB,SAAuD,6BACvD,0BAAMA,UAAU,4BAAhB,SACA,0BAAMA,UAAU,wBAEX8H,WAAWjE,GAAa+E,QAAQ,GACjC,MACAA,QAAQ,IAEZ,0BAAM5I,UAAU,4BAAhB,UAEF,yBAAKA,UAAU,gBAEgB,IAA1B8H,WAAWjE,GACZiE,WAAWnE,IACXiF,QAAQ,GAJZ,KAOA,yBAAK5I,UAAU,eAAf,qBAIJ,kBAAC2I,EAAD,CAAMrI,MAAM,QACV,yBAAKN,UAAU,2BACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mCACb,iCA+BPuD,GAAiB,kBAACoF,EAAD,CAAMrI,MAAM,WAC5B,yBAAKN,UAAU,2BACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,yBAAhB,yBACyB,KAGzB,0BAAMA,UAAU,4BAAhB,UAEF,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,yBAAhB,oBACoB,KAEpB,0BAAMA,UAAU,uBAAuBsG,SAASA,SAAS3C,GAAW,OACpE,0BAAM3D,UAAU,4BAAhB,UAEF,yBAAKA,UAAU,4EACb,2BACE6I,KAAK,SACLC,YAAY,iBACZC,MAAO5E,GACP6E,SAAU,SAACC,GAAD,OAAO7E,GAAU6E,EAAElI,OAAOgI,QACpC/I,UAAU,iIAEZ,kBAACoI,EAAD,CACErI,QAAS,kBAzaH,2CAyaS6H,IACf5H,UAAU,kDAET6C,EACC,kBAAC,EAAD,CAASV,KAAM,KAEf,oCACE,yBAAKkG,IAAI,qBAAqB5G,MAAM,KAAK6G,IAAI,KAC7C,0BAAMtI,UAAU,QAAhB,mBAA8C,SAQ1D,kBAAC2I,EAAD,CAAMrI,MAAM,iBACV,yBAAKN,UAAU,2BACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,wBACZ8H,WAAW7D,IAAgB,MAAqB2E,QAAQ,IAE5D,0BAAM5I,UAAU,4BAAhB,UAEF,yBAAKA,UAAU,gCACb,kBAACoI,EAAD,CACES,KAAK,SACL7I,UAAU,iDACVD,QAAS,kBArcH,2CAqcSmJ,KAEdnG,EACC,kBAAC,EAAD,CAASZ,KAAM,KAEf,oCACE,yBAAKkG,IAAI,uBAAuB5G,MAAM,KAAK6G,IAAI,KAC/C,0BAAMtI,UAAU,QAAhB,aAAwC,OAKhD,yBAAKA,UAAU,6CACb,8BAcA,sCExdLmJ,EAdH,WAGV,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAACC,EAAD,UCJJC,EAAUvI,SAASwI,qBAAqB,QAAQ,GAAGC,aAAa,QAChEC,EAAc1I,SAAS2I,eAAe,QAE5CC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUP,GACvB,kBAAC,EAAD,OAEFG,K","file":"static/js/main.ce3b82b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nexport default ({\r\n  color = \"white\",\r\n  bgColor = \"primary\",\r\n  showBorder = false,\r\n  onClick,\r\n  className,\r\n  children,\r\n  uppercase = true,\r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={cx(\r\n        className,\r\n        \"rounded-md px-4 py-2 mx-1 font-Montserrat-ExtraBold\",\r\n        uppercase ? \"uppercase\" : \"\",\r\n        showBorder ? \"border\" : \"\",\r\n        \"bg-\" + bgColor,\r\n        \"hover:bg-\" + bgColor + \"-hover\",\r\n        \"hover:border-\" + bgColor + \"-hover\",\r\n        \"text-\" + color,\r\n        \"hover:text-\" + color + \"-hover\",\r\n        \"border-\" + color,\r\n        \"hover:border-\" + color + \"-hover\"\r\n      )}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\n\nconst Modal = ({ children, onClose, title }) => {\n  const ref = useRef(null);\n\n  const closeModal = () => {\n    document.querySelector(\"body\").classList.remove(\"overflow-hidden\");\n    onClose();\n  };\n\n  useOnClickOutside(ref, () => {\n    closeModal();\n  });\n\n  return (\n    <div\n      className=\"fixed overflow-auto flex items-center\"\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, .2)\",\n        width: \"100%\",\n        height: \"100%\",\n        top: 0,\n        left: 0,\n        zIndex: 5000,\n      }}\n    >\n      <div\n        ref={ref}\n        className=\"relative p-8 border-2 border-primary rounded-md bg-white w-full max-w-md m-auto h-custom\"\n        style={{\n          minWidth: \"300px\",\n          maxWidth: \"700px\",\n        }}\n      >\n        <div className=\"flex flex-row items-center\">\n          <div className=\"text-3xl font-bold\">{title}</div>\n        </div>\n\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useEffect } from \"react\";\n\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n","import React from \"react\";\r\n\r\nexport default ({ title, className, noLine, children }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-full rounded-lg card-bg pb-4\" + (className ? className : \"\")\r\n      }\r\n    >\r\n      <div className={`text-center font-Montserrat-ExtraBold text-white text-2xl uppercase pt-3 pb-2 ${noLine ? \"\" : \"border-b border-dashed border-white\"}`}>\r\n        {title}\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = ({ animationDuration, size, color }) => {\n  return (\n    <div\n      className=\"half-circle-spinner\"\n      style={{\n        height: `${size}px`,\n        width: `${size}px`,\n      }}\n    >\n      <div\n        className=\"circle circle-1\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderTopColor: color,\n        }}\n      />\n      <div\n        className=\"circle circle-2\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderBottomColor: color,\n        }}\n      />\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  animationDuration: 1000,\n  size: 40,\n  color: \"#2c6fa5\",\n};\n\nexport default Spinner;\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../components/common/Button\";\r\nimport Modal from \"../components/common/Modal\";\r\nimport Card from \"../components/common/Card\";\r\nimport Spinner from \"../components/common/Spinner\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport FlexibleStake from \"../contracts/FlexibleStake.json\";\r\nimport MMPRO from \"../contracts/MMPRO.json\";\r\nimport fromExponential from \"from-exponential\";\r\nimport { Link } from \"react-router-dom\";\r\nconst HomePage = (props) => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [web3, setWeb3] = useState();\r\n  const [accounts, setAccounts] = useState();\r\n  const [flexibleStake, setFlexibleStake] = useState();\r\n  // const [stakeToken, setStakeToken] = useState();\r\n  // const [usersStake, setUserStake] = useState();\r\n  // const [freeAmount, setFreeAmount] = useState();\r\n  // const [totalSupply, setTotalSupply] = useState();\r\n  const [mmPROToken, setMmPROToken] = useState();\r\n  const [balance, setBalance] = useState();\r\n  const [totalStaked, setTotalStaked] = useState();\r\n  const [stakedByUser, setStakedByUser] = useState(0);\r\n  const [totalRewards, setTotalRewards] = useState();\r\n  const [amount, setAmount] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const init = async () => {\r\n    if (isReady()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    let web3;\r\n    try {\r\n      web3 = await initWeb3();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n    const networkId = await web3.eth.net.getId();\r\n    if (networkId !== 97) {\r\n      setError(\"Please connect BSC Testnet account\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const mmPROToken = new web3.eth.Contract(\r\n      MMPRO.abi,\r\n      \"0xa8892B044eCE158cb4869B59F1972Fa01Aae6D2E\"\r\n    ); //testnet address for MMPRO token\r\n\r\n    // const totalSupply = await mmPROToken.methods.totalSupply().call();\r\n    // const stakeToken = await flexibleStake.methods.stakeToken().call();\r\n    // const freeAmount = await flexibleStake.methods.freeAmount().call();\r\n    const balance = await mmPROToken.methods.balanceOf(accounts[0]).call();\r\n\r\n    const flexibleStake = new web3.eth.Contract(\r\n      FlexibleStake.abi,\r\n      \"0x782A2651BC14b8529Cca036b9AFc2e1487e8ecEe\"\r\n    ); //testnet adddress for staking dapp\r\n    const totalStaked = await flexibleStake.methods.totalStaked().call();\r\n    const stakedByUserArray = await flexibleStake.methods.getUserStakes(accounts[0]).call();\r\n    let sumOfStaked = 0;\r\n    stakedByUserArray.forEach(stakedByUserIndex => {\r\n      sumOfStaked = parseInt(sumOfStaked) + parseInt(stakedByUserIndex.amount);\r\n    });\r\n\r\n\r\n    let sumTotalRewards = 0;\r\n    for (let i = 0; i < stakedByUserArray.length; i++) {\r\n      const rewards = await flexibleStake.methods.calcRewardsByIndex(accounts[0], i).call();\r\n      if (rewards.claimable) {\r\n        sumTotalRewards = parseInt(sumTotalRewards) + parseInt(rewards.rewards);\r\n      }\r\n    }\r\n\r\n    setWeb3(web3);\r\n    setAccounts(accounts);\r\n    // setTotalSupply(totalSupply);\r\n    // setFreeAmount(freeAmount);\r\n    // setStakeToken(stakeToken);\r\n    setMmPROToken(mmPROToken);\r\n    setBalance(balance);\r\n    setTotalStaked(totalStaked);\r\n    setFlexibleStake(flexibleStake);\r\n    setStakedByUser(sumOfStaked);\r\n    setTotalRewards(sumTotalRewards);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      // debugger;\r\n      if (accounts.length > 0) {\r\n        setAccounts(accounts);\r\n      } else {\r\n        setAccounts(null);\r\n      }\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const isReady = () => {\r\n    return !!flexibleStake && !!web3 && !!accounts;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const triggerAlreadyInjectedWeb3 = async () => {\r\n      if (window.ethereum) {\r\n        if (\r\n          window.ethereum.selectedAddress &&\r\n          window.ethereum.networkVersion === \"1\"\r\n        ) {\r\n          await init();\r\n        }\r\n      }\r\n    };\r\n    triggerAlreadyInjectedWeb3();\r\n  }, []);\r\n\r\n  async function updateAll() {\r\n    await Promise.all([\r\n      // updateTotalSupply(),\r\n      // updateStakeToken(),\r\n      // updateFreeAmount(),\r\n      updateAccountBalance(),\r\n      updateTotalStaked(),\r\n      updateStakedByUser(),\r\n      updateTotalRewards()\r\n    ]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isReady()) {\r\n      updateAll();\r\n    }\r\n  }, [flexibleStake, mmPROToken, web3, accounts]);\r\n\r\n  async function updateStakedByUser() {\r\n    if (flexibleStake) {\r\n      let sumOfStaked = 0;\r\n      const stakedByUserArray = await flexibleStake.methods.getUserStakes(accounts[0]).call();\r\n      stakedByUserArray.forEach(stakedByUserIndex => {\r\n        sumOfStaked = parseInt(sumOfStaked) + parseInt(stakedByUserIndex.amount);\r\n      });\r\n      setStakedByUser(sumOfStaked);\r\n      return sumOfStaked;\r\n    }\r\n  }\r\n\r\n  // async function updateFreeAmount() {\r\n  //   const freeAmount = await flexibleStake.methods.freeAmount().call();\r\n  //   setFreeAmount(freeAmount);\r\n  //   return freeAmount;\r\n  // }\r\n\r\n  // async function updateStakeToken() {\r\n  //   if (flexibleStake) {\r\n  //     const stakeToken = await flexibleStake.methods.stakeToken().call();\r\n  //     setStakeToken(stakeToken);\r\n  //     return stakeToken;\r\n  //   }\r\n  // }\r\n\r\n  // async function updateTotalSupply() {\r\n  //   if (mmPROToken) {\r\n  //     const totalSupply = await mmPROToken.methods.totalSupply().call();\r\n  //     setTotalSupply(totalSupply);\r\n  //     return totalSupply;\r\n  //   }\r\n  // }\r\n\r\n  async function updateTotalRewards() {\r\n    if (flexibleStake) {\r\n      const _userStake = await flexibleStake.methods.getUserStakes(accounts[0]).call();\r\n      const count = _userStake.length;\r\n      let sumTotalRewards = 0;\r\n      for (let i = 0; i < count; i++) {\r\n        const rewards = await flexibleStake.methods.calcRewardsByIndex(accounts[0], i).call();\r\n        if (rewards.claimable) {\r\n          sumTotalRewards = parseInt(sumTotalRewards) + parseInt(rewards.rewards);\r\n        }\r\n      }\r\n      setTotalRewards(sumTotalRewards);\r\n      return sumTotalRewards;\r\n    }\r\n  }\r\n\r\n  async function updateAccountBalance() {\r\n    if (mmPROToken) {\r\n      const balance = await mmPROToken.methods.balanceOf(accounts[0]).call();\r\n      setBalance(balance);\r\n      return balance;\r\n    }\r\n  }\r\n\r\n  async function updateTotalStaked() {\r\n    if (flexibleStake) {\r\n      const totalStaked = await flexibleStake.methods.totalStaked().call();\r\n      setTotalStaked(totalStaked);\r\n      return totalStaked;\r\n    }\r\n  }\r\n\r\n  async function stake() {\r\n\r\n    setStakeLoading(true);\r\n    const actual = amount * (10 ** 18);\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      await mmPROToken.methods\r\n        .approve(\"0x782A2651BC14b8529Cca036b9AFc2e1487e8ecEe\", arg)\r\n        .send({ from: accounts[0] });\r\n\r\n      await flexibleStake.methods.stake(arg).send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function withdrawEarnings() {\r\n    console.log(\"withdrawEarnings\");\r\n    if (parseFloat(totalRewards) === 0) {\r\n      console.error(\"No earnings yet!\");\r\n      return;\r\n    }\r\n    setWithdrawLoading(true);\r\n    try {\r\n      const _userStake = await flexibleStake.methods.getUserStakes(accounts[0]).call();\r\n      const count = _userStake.length;\r\n      console.log(count);\r\n      for (let i = 0; i < count; i++) {\r\n        await flexibleStake.methods.claimRewards(i).send({ from: accounts[0] });\r\n      }\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setWithdrawLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full overflow-hidden\">\r\n      {showModal && (\r\n        <Modal title=\"\" onClose={() => setShowModal(false)}>\r\n          <div className=\"text-2xl mb-2\">\r\n            Error! Your transaction has been reverted!\r\n          </div>\r\n          <div>1. Please check your account and retry again...</div>\r\n          <div>2. Your referrer's address is a registered member if any</div>\r\n\r\n          <div className=\"my-2\">\r\n            Thanks for your support and feel free to{\" \"}\r\n            <a href=\"https://www.leadwallet.io/contact\" className=\"text-blue-500\">\r\n              contact us\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"flex flex-row justify-center\">\r\n            <Button onClick={() => setShowModal(false)}>Close</Button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <div className=\"relative z-20 w-full top-0\">\r\n        <img\r\n          src=\"/images/nosiy.png\"\r\n          alt=\"\"\r\n          className=\"absolute z-10 top-noisy\"\r\n        />\r\n        <img\r\n          src=\"/images/nosiy.png\"\r\n          alt=\"\"\r\n          className=\"absolute z-10 second-noisy\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"relative z-10 w-full top-0\">\r\n        <div className=\"absolute w-full home-gradient\"></div>\r\n      </div>\r\n\r\n      <div className=\"relative w-full z-30\">\r\n        {/* <Header /> */}\r\n\r\n        <div className=\"container mx-auto pb-18 px-4 force-height\">\r\n          {!accounts && (\r\n            <div className=\"w-full py-6 text-center\">\r\n              <div style={{ textAlign: \"center\", marginTop: \"1em\" }}>\r\n                <div id='controls' >\r\n                  <Link id='toggler' to='#' >Switch To Ethereum Chain</  Link>\r\n                </div>\r\n              </div>\r\n              <Button\r\n                className=\"w-full md:w-2/5 text-2xl flex flex-row justify-center mx-auto\"\r\n                uppercase={false}\r\n                onClick={async () => await init()}\r\n              >\r\n                {loading && <Spinner color=\"white\" size={40} />}\r\n                {!loading && (error !== \"\" ? error : \"CONNECT METAMASK WALLET\")}\r\n              </Button>\r\n\r\n              <div className=\"text-white text-center mt-6 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-bold\">\r\n                <h1>Stake Your Token</h1>\r\n              </div>\r\n              <div className=\"w-full md:w-3/6 justify-center mx-auto mt-6\">\r\n                <Card title=\"Rules\">\r\n                  <div className=\"flex flex-col pt-8 pb-4 text-white text-center\">\r\n                    <ul>\r\n                      <li>\r\n                        1. Connect your MetaMask wallet to participate\r\n                      </li>\r\n                      <li>\r\n                        2. Stake tokens and earn daily returns from allocated pool\r\n                      </li>\r\n                      <li>\r\n                        3. Withdraw earned rewards anytime\r\n                      </li>\r\n                      <li>\r\n                        4. Unstake tokens anytime\r\n                      </li>\r\n                      <li>\r\n                        5. Earn extra rewards by referring new members\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {accounts && (\r\n            <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10\">\r\n              <Card title=\"Your/Total Staked MMPRO\">\r\n                <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                  <div className=\"text-center\">\r\n                    <span className=\"text-white text-2xl ml-2\">Yours</span>\r\n                    <span className=\"text-white text-5xl\">\r\n                      {(\r\n                        (parseFloat(stakedByUser).toFixed(2)) /\r\n                        1000000000000000000\r\n                      ).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span><br />\r\n                    <span className=\"text-white text-2xl ml-2\">Total</span>\r\n                    <span className=\"text-white text-5xl\">\r\n                      {(\r\n                        (parseFloat(totalStaked).toFixed(2)) /\r\n                        1000000000000000000\r\n                      ).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    {(\r\n                      (parseFloat(totalStaked) * 100.0) /\r\n                      parseFloat(balance)\r\n                    ).toFixed(5)}\r\n                    %\r\n                  </div>\r\n                  <div className=\"text-center\">of total supply</div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Fees\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-8\">\r\n                    <div className=\"text-gray-400 text-lg font-thin\">\r\n                      <ul>\r\n                        {/* <li>\r\n                          Registration Fee:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseInt(registrationTax) / 1000000000000000000} MMPRO\r\n                          </span>\r\n                        </li>\r\n                        <li>\r\n                          Staking Fee:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseFloat(stakingTax) / 10} %\r\n                          </span>\r\n                        </li>\r\n                        <li>\r\n                          Unstaking Fee:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseFloat(unstakingTax) / 10} %\r\n                          </span>\r\n                        </li>\r\n                        <li>\r\n                          Minimum Stake:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseInt(minStake) / 1000000000000000000} MMPRO\r\n                          </span>\r\n                        </li> */}\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              {flexibleStake && <Card title=\"Staking\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Minimum amount needed:{\" \"}\r\n                    </span>\r\n                    {/* <span className=\"text-white text-3xl\">{parseInt(minStake) / 1000000000000000000}</span> */}\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Available amount:{\" \"}\r\n                    </span>\r\n                    <span className=\"text-white text-3xl\">{parseInt(parseInt(balance) / 1000000000000000000)}</span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Stake\"\r\n                      value={amount}\r\n                      onChange={(e) => setAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    />\r\n                    <Button\r\n                      onClick={() => stake()}\r\n                      className=\"flex flex-row items-center w-96 justify-center\"\r\n                    >\r\n                      {stakeLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/locked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-48\">APPROVE & STAKE</span>{\" \"}\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>}\r\n\r\n              <Card title=\"Your Earnings\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-8\">\r\n                    <span className=\"text-white text-5xl\">\r\n                      {(parseFloat(totalRewards) / 1000000000000000000).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"flex flex-row justify-center\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\"flex flex-row items-center justify-center w-48\"\r\n                      onClick={() => withdrawEarnings()}\r\n                    >\r\n                      {withdrawLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/unlocked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-32\">CLAIM ALL</span>{\" \"}\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"text-center text-white text-2xl mt-8 mx-2\">\r\n                    <div>\r\n                      {/* <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Staking Reward:{\" \"}\r\n                        </span>\r\n                        {parseFloat(stakingRewards) / 1000000000000000000} MMPRO\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Daily Return:{\" \"}\r\n                        </span>\r\n                        {parseFloat(dailyROI) / 100} %\r\n                      </div> */}\r\n                    </div>\r\n                    <div>\r\n                      {/* <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Referral Reward:\r\n                        </span>{\" \"}\r\n                        {parseFloat(referralRewards) / 1000000000000000000} MMPRO\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Referral Count:\r\n                        </span>{\" \"}\r\n                        {referralCount}\r\n                      </div> */}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              {/* <Card title=\"Unstaking\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Available to unstake:{\" \"}\r\n                    </span>\r\n                    <span className=\"text-white text-3xl\">{(parseFloat(stakes) / 1000000000000000000).toFixed()}</span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Unstake\"\r\n                      value={unstakeAmount}\r\n                      onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    />\r\n                    <Button\r\n                      onClick={() => unstake()}\r\n                      className=\"flex flex-row items-center w-48 justify-center\"\r\n                    >\r\n                      {unstakeLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/unlocked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-24\">UNSTAKE</span>\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card> */}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* <Footer /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport StakingPage from \"./pages/StakingPage\";\r\n\r\nconst App = () => {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <StakingPage />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"./styles/tailwind.css\";\r\nimport \"./styles/index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}