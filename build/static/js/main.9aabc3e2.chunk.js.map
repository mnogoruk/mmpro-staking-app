{"version":3,"sources":["components/common/Button.js","components/common/Modal.js","hooks/useOnClickOutside.js","components/common/Card.js","components/common/Spinner.js","pages/StakingPage.js","utils.js","App.js","index.js"],"names":["color","bgColor","showBorder","onClick","className","children","uppercase","cx","Modal","onClose","title","ref","useRef","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","querySelector","classList","remove","style","backgroundColor","width","height","top","left","zIndex","minWidth","maxWidth","noLine","Spinner","animationDuration","size","borderWidth","borderTopColor","borderBottomColor","defaultProps","HomePage","props","useState","loading","setLoading","stakeLoading","setStakeLoading","withdrawLoading","setWithdrawLoading","error","setError","web3","setWeb3","accounts","setAccounts","flexibleStake","setFlexibleStake","emissionPerSecond","setEmissionPerSecond","cumulativeIndex","setCumulativeIndex","lastUpdatedTimestamp","setLastUpdatedTimestamp","setStakeToken","mmPROToken","setMmPROToken","totalSupply","setTotalSupply","setBalance","totalStaked","setTotalStaked","freeAmount","setFreeAmount","totalRewards","amount","setAmount","showModal","setShowModal","init","a","isReady","Promise","resolve","reject","window","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","getAccounts","net","getId","Contract","MMPRO","abi","methods","call","balanceOf","balance","FlexibleStake","stakeToken","on","updateAll","all","updateTotalSupply","updateAccountBalance","updateTotalStaked","updateEmissionPerSecond","updateCumulativeIndex","updateLastUpdatedTimestamp","updateStakeToken","updateFreeAmount","actual","arg","fromExponential","approve","send","from","stake","code","parseFloat","withdrawEarnings","selectedAddress","networkVersion","triggerAlreadyInjectedWeb3","href","Button","src","alt","textAlign","marginTop","id","to","Card","toFixed","parseInt","type","placeholder","value","onChange","e","App","path","exact","StakingPage","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.9aabc3e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nexport default ({\r\n  color = \"white\",\r\n  bgColor = \"primary\",\r\n  showBorder = false,\r\n  onClick,\r\n  className,\r\n  children,\r\n  uppercase = true,\r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={cx(\r\n        className,\r\n        \"rounded-md px-4 py-2 mx-1 font-Montserrat-ExtraBold\",\r\n        uppercase ? \"uppercase\" : \"\",\r\n        showBorder ? \"border\" : \"\",\r\n        \"bg-\" + bgColor,\r\n        \"hover:bg-\" + bgColor + \"-hover\",\r\n        \"hover:border-\" + bgColor + \"-hover\",\r\n        \"text-\" + color,\r\n        \"hover:text-\" + color + \"-hover\",\r\n        \"border-\" + color,\r\n        \"hover:border-\" + color + \"-hover\"\r\n      )}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\n\nconst Modal = ({ children, onClose, title }) => {\n  const ref = useRef(null);\n\n  const closeModal = () => {\n    document.querySelector(\"body\").classList.remove(\"overflow-hidden\");\n    onClose();\n  };\n\n  useOnClickOutside(ref, () => {\n    closeModal();\n  });\n\n  return (\n    <div\n      className=\"fixed overflow-auto flex items-center\"\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, .2)\",\n        width: \"100%\",\n        height: \"100%\",\n        top: 0,\n        left: 0,\n        zIndex: 5000,\n      }}\n    >\n      <div\n        ref={ref}\n        className=\"relative p-8 border-2 border-primary rounded-md bg-white w-full max-w-md m-auto h-custom\"\n        style={{\n          minWidth: \"300px\",\n          maxWidth: \"700px\",\n        }}\n      >\n        <div className=\"flex flex-row items-center\">\n          <div className=\"text-3xl font-bold\">{title}</div>\n        </div>\n\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useEffect } from \"react\";\n\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n","import React from \"react\";\r\n\r\nexport default ({ title, className, noLine, children }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-full rounded-lg card-bg pb-4\" + (className ? className : \"\")\r\n      }\r\n    >\r\n      <div className={`text-center font-Montserrat-ExtraBold text-white text-2xl uppercase pt-3 pb-2 ${noLine ? \"\" : \"border-b border-dashed border-white\"}`}>\r\n        {title}\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = ({ animationDuration, size, color }) => {\n  return (\n    <div\n      className=\"half-circle-spinner\"\n      style={{\n        height: `${size}px`,\n        width: `${size}px`,\n      }}\n    >\n      <div\n        className=\"circle circle-1\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderTopColor: color,\n        }}\n      />\n      <div\n        className=\"circle circle-2\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderBottomColor: color,\n        }}\n      />\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  animationDuration: 1000,\n  size: 40,\n  color: \"#2c6fa5\",\n};\n\nexport default Spinner;\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../components/common/Button\";\r\nimport Modal from \"../components/common/Modal\";\r\nimport Card from \"../components/common/Card\";\r\nimport Spinner from \"../components/common/Spinner\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport FlexibleStake from \"../contracts/FlexibleStake.json\";\r\nimport MMPRO from \"../contracts/MMPRO.json\";\r\nimport fromExponential from \"from-exponential\";\r\nimport { Link } from \"react-router-dom\";\r\nconst HomePage = (props) => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [web3, setWeb3] = useState();\r\n  const [accounts, setAccounts] = useState();\r\n  const [flexibleStake, setFlexibleStake] = useState();\r\n  const [emissionPerSecond, setEmissionPerSecond] = useState();\r\n  const [cumulativeIndex, setCumulativeIndex] = useState();\r\n  const [lastUpdatedTimestamp, setLastUpdatedTimestamp] = useState();\r\n  const [stakeToken, setStakeToken] = useState();\r\n  const [usersStake, setUserStake] = useState();\r\n  const [mmPROToken, setMmPROToken] = useState();\r\n  const [totalSupply, setTotalSupply] = useState();\r\n  const [balance, setBalance] = useState();\r\n  const [totalStaked, setTotalStaked] = useState();\r\n  const [freeAmount, setFreeAmount] = useState();\r\n  const [totalRewards, setTotalRewards] = useState();\r\n  const [amount, setAmount] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const init = async () => {\r\n    if (isReady()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    let web3;\r\n    try {\r\n      web3 = await initWeb3();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n    const networkId = await web3.eth.net.getId();\r\n    if (networkId !== 97) {\r\n      setError(\"Please connect BSC Testnet account\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const mmPROToken = new web3.eth.Contract(\r\n      MMPRO.abi,\r\n      \"0xa8892B044eCE158cb4869B59F1972Fa01Aae6D2E\"\r\n    ); //mainnet address for lead token\r\n    const totalSupply = await mmPROToken.methods.totalSupply().call();\r\n    const balance = await mmPROToken.methods.balanceOf(accounts[0]).call();\r\n\r\n    const flexibleStake = new web3.eth.Contract(\r\n      FlexibleStake.abi,\r\n      \"0x782A2651BC14b8529Cca036b9AFc2e1487e8ecEe\"\r\n    ); //mainnet adddress for staking dapp\r\n    const totalStaked = await flexibleStake.methods.totalStaked().call();\r\n    const stakeToken = await flexibleStake.methods.stakeToken().call();\r\n    const freeAmount = await flexibleStake.methods.freeAmount().call();\r\n    // const usersStake = await flexibleStake.methods.usersStake(accounts[0]).call();\r\n\r\n    setWeb3(web3);\r\n    setAccounts(accounts);\r\n    setMmPROToken(mmPROToken);\r\n    setTotalSupply(totalSupply);\r\n    setBalance(balance);\r\n    setFreeAmount(freeAmount);\r\n    setTotalStaked(totalStaked);\r\n    setEmissionPerSecond(emissionPerSecond);\r\n    setCumulativeIndex(cumulativeIndex);\r\n    setLastUpdatedTimestamp(lastUpdatedTimestamp);\r\n    setStakeToken(stakeToken);\r\n    setFlexibleStake(flexibleStake);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      setAccounts(accounts);\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const isReady = () => {\r\n    return !!flexibleStake && !!web3 && !!accounts;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const triggerAlreadyInjectedWeb3 = async () => {\r\n      if (window.ethereum) {\r\n        if (\r\n          window.ethereum.selectedAddress &&\r\n          window.ethereum.networkVersion === \"1\"\r\n        ) {\r\n          await init();\r\n        }\r\n      }\r\n    };\r\n    triggerAlreadyInjectedWeb3();\r\n  }, []);\r\n\r\n  async function updateAll() {\r\n    await Promise.all([\r\n      updateTotalSupply(),\r\n      updateAccountBalance(),\r\n      updateTotalStaked(),\r\n      updateEmissionPerSecond(),\r\n      updateCumulativeIndex(),\r\n      updateLastUpdatedTimestamp(),\r\n      updateStakeToken(),\r\n      updateFreeAmount()\r\n    ]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isReady()) {\r\n      updateAll();\r\n    }\r\n  }, [flexibleStake, mmPROToken, web3, accounts]);\r\n\r\n  async function updateEmissionPerSecond() {\r\n    const emissionPerSecond = await flexibleStake.methods.emissionPerSecond().call();\r\n    setEmissionPerSecond(emissionPerSecond);\r\n    return emissionPerSecond;\r\n  }\r\n\r\n  async function updateFreeAmount() {\r\n    const freeAmount = await flexibleStake.methods.freeAmount().call();\r\n    setFreeAmount(freeAmount);\r\n    return freeAmount;\r\n  }\r\n\r\n  async function updateCumulativeIndex() {\r\n    const cumulativeIndex = await flexibleStake.methods.cumulativeIndex().call();\r\n    setCumulativeIndex(cumulativeIndex);\r\n    return cumulativeIndex;\r\n  }\r\n\r\n  async function updateLastUpdatedTimestamp() {\r\n    const lastUpdatedTimestamp = await flexibleStake.methods.lastUpdatedTimestamp().call();\r\n    setLastUpdatedTimestamp(lastUpdatedTimestamp);\r\n    return lastUpdatedTimestamp;\r\n  }\r\n\r\n  async function updateStakeToken() {\r\n    const stakeToken = await flexibleStake.methods.stakeToken().call();\r\n    setStakeToken(stakeToken);\r\n    return stakeToken;\r\n  }\r\n\r\n  async function updateStakes() {\r\n    const stake = await flexibleStake.methods.usersStake(accounts[0], 10).call();\r\n    setUserStake(stake);\r\n    return stake;\r\n  }\r\n\r\n  async function updateAccountBalance() {\r\n    if (mmPROToken) {\r\n      // debugger;\r\n      const balance = await mmPROToken.methods.balanceOf(accounts[0]).call();\r\n      setBalance(balance);\r\n      return balance;\r\n    }\r\n  }\r\n\r\n  async function updateTotalSupply() {\r\n    if (mmPROToken) {\r\n      const totalSupply = await mmPROToken.methods.totalSupply().call();\r\n      setTotalSupply(totalSupply);\r\n      return totalSupply;\r\n    }\r\n  }\r\n\r\n  async function updateTotalStaked() {\r\n    if (flexibleStake) {\r\n      const totalStaked = await flexibleStake.methods.totalStaked().call();\r\n      return totalStaked;\r\n    }\r\n  }\r\n\r\n  async function stake() {\r\n    setStakeLoading(true);\r\n    console.log(amount);\r\n    const actual = amount * (10 ** 18);\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      await mmPROToken.methods\r\n        .approve(\"0x782A2651BC14b8529Cca036b9AFc2e1487e8ecEe\", arg)\r\n        .send({ from: accounts[0] });\r\n\r\n      await flexibleStake.methods.stake(arg).send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function withdrawEarnings() {\r\n    if (parseFloat(totalRewards) === 0) {\r\n      console.error(\"No earnings yet!\");\r\n      return;\r\n    }\r\n    setWithdrawLoading(true);\r\n    try {\r\n      await flexibleStake.methods.withdrawEarnings().send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setWithdrawLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full overflow-hidden\">\r\n      {showModal && (\r\n        <Modal title=\"\" onClose={() => setShowModal(false)}>\r\n          <div className=\"text-2xl mb-2\">\r\n            Error! Your transaction has been reverted!\r\n          </div>\r\n          <div>1. Please check your account and retry again...</div>\r\n          <div>2. Your referrer's address is a registered member if any</div>\r\n\r\n          <div className=\"my-2\">\r\n            Thanks for your support and feel free to{\" \"}\r\n            <a href=\"https://www.leadwallet.io/contact\" className=\"text-blue-500\">\r\n              contact us\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"flex flex-row justify-center\">\r\n            <Button onClick={() => setShowModal(false)}>Close</Button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <div className=\"relative z-20 w-full top-0\">\r\n        <img\r\n          src=\"/images/nosiy.png\"\r\n          alt=\"\"\r\n          className=\"absolute z-10 top-noisy\"\r\n        />\r\n        <img\r\n          src=\"/images/nosiy.png\"\r\n          alt=\"\"\r\n          className=\"absolute z-10 second-noisy\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"relative z-10 w-full top-0\">\r\n        <div className=\"absolute w-full home-gradient\"></div>\r\n      </div>\r\n\r\n      <div className=\"relative w-full z-30\">\r\n        {/* <Header /> */}\r\n\r\n        <div className=\"container mx-auto pb-18 px-4 force-height\">\r\n          {!accounts && (\r\n            <div className=\"w-full py-6 text-center\">\r\n              <div style={{ textAlign: \"center\", marginTop: \"1em\" }}>\r\n                <div id='controls' >\r\n                  <Link id='toggler' to='#' >Switch To Ethereum Chain</  Link>\r\n                </div>\r\n              </div>\r\n              <Button\r\n                className=\"w-full md:w-2/5 text-2xl flex flex-row justify-center mx-auto\"\r\n                uppercase={false}\r\n                onClick={async () => await init()}\r\n              >\r\n                {loading && <Spinner color=\"white\" size={40} />}\r\n                {!loading && (error !== \"\" ? error : \"CONNECT METAMASK WALLET\")}\r\n              </Button>\r\n\r\n              <div className=\"text-white text-center mt-6 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-bold\">\r\n                <h1>Stake Your Token</h1>\r\n              </div>\r\n              <div className=\"w-full md:w-3/6 justify-center mx-auto mt-6\">\r\n                <Card title=\"Rules\">\r\n                  <div className=\"flex flex-col pt-8 pb-4 text-white text-center\">\r\n                    <ul>\r\n                      <li>\r\n                        1. Connect your MetaMask wallet to participate\r\n                      </li>\r\n                      <li>\r\n                        2. Stake tokens and earn daily returns from allocated pool\r\n                      </li>\r\n                      <li>\r\n                        3. Withdraw earned rewards anytime\r\n                      </li>\r\n                      <li>\r\n                        4. Unstake tokens anytime\r\n                      </li>\r\n                      <li>\r\n                        5. Earn extra rewards by referring new members\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {accounts && (\r\n            <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10\">\r\n              <Card title=\"Total Staked MMPRO\">\r\n                <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                  <div className=\"text-center\">\r\n                    <span className=\"text-white text-5xl\">\r\n                      {(\r\n                        (parseFloat(totalStaked).toFixed(2)) /\r\n                        1000000000000000000\r\n                      ).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    {(\r\n                      (parseFloat(totalStaked) * 100.0) /\r\n                      parseFloat(totalSupply)\r\n                    ).toFixed(5)}\r\n                    %\r\n                  </div>\r\n                  <div className=\"text-center\">of total supply</div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Fees\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-8\">\r\n                    <div className=\"text-gray-400 text-lg font-thin\">\r\n                      <ul>\r\n                        {/* <li>\r\n                          Registration Fee:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseInt(registrationTax) / 1000000000000000000} MMPRO\r\n                          </span>\r\n                        </li>\r\n                        <li>\r\n                          Staking Fee:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseFloat(stakingTax) / 10} %\r\n                          </span>\r\n                        </li>\r\n                        <li>\r\n                          Unstaking Fee:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseFloat(unstakingTax) / 10} %\r\n                          </span>\r\n                        </li>\r\n                        <li>\r\n                          Minimum Stake:{\"  \"}\r\n                          <span className=\"text-white text-2xl\">\r\n                            {parseInt(minStake) / 1000000000000000000} MMPRO\r\n                          </span>\r\n                        </li> */}\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              {flexibleStake && <Card title=\"Staking\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Minimum amount needed:{\" \"}\r\n                    </span>\r\n                    {/* <span className=\"text-white text-3xl\">{parseInt(minStake) / 1000000000000000000}</span> */}\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Available amount:{\" \"}\r\n                    </span>\r\n                    <span className=\"text-white text-3xl\">{parseInt(parseInt(freeAmount) / 1000000000000000000)}</span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Stake\"\r\n                      value={amount}\r\n                      onChange={(e) => setAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    />\r\n                    <Button\r\n                      onClick={() => stake()}\r\n                      className=\"flex flex-row items-center w-48 justify-center\"\r\n                    >\r\n                      {stakeLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/locked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-16\">STAKE</span>{\" \"}\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>}\r\n\r\n              <Card title=\"Your Earnings\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-8\">\r\n                    <span className=\"text-white text-5xl\">\r\n                      {(parseFloat(totalRewards) / 1000000000000000000).toFixed(2)}\r\n                    </span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"flex flex-row justify-center\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\"flex flex-row items-center justify-center w-32\"\r\n                      onClick={() => withdrawEarnings()}\r\n                    >\r\n                      {withdrawLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/unlocked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-24\">CLAIM</span>{\" \"}\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"text-center text-white text-2xl mt-8 mx-2\">\r\n                    <div>\r\n                      {/* <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Staking Reward:{\" \"}\r\n                        </span>\r\n                        {parseFloat(stakingRewards) / 1000000000000000000} MMPRO\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Daily Return:{\" \"}\r\n                        </span>\r\n                        {parseFloat(dailyROI) / 100} %\r\n                      </div> */}\r\n                    </div>\r\n                    <div>\r\n                      {/* <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Referral Reward:\r\n                        </span>{\" \"}\r\n                        {parseFloat(referralRewards) / 1000000000000000000} MMPRO\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-gray-400 text-lg\">\r\n                          Referral Count:\r\n                        </span>{\" \"}\r\n                        {referralCount}\r\n                      </div> */}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              {/* <Card title=\"Unstaking\">\r\n                <div className=\"flex flex-col pt-8 px-2\">\r\n                  <div className=\"text-center pb-4\">\r\n                    <span className=\"text-lg text-gray-400\">\r\n                      Available to unstake:{\" \"}\r\n                    </span>\r\n                    <span className=\"text-white text-3xl\">{(parseFloat(stakes) / 1000000000000000000).toFixed()}</span>\r\n                    <span className=\"text-white text-2xl ml-2\">MMPRO</span>\r\n                  </div>\r\n                  <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                    <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Unstake\"\r\n                      value={unstakeAmount}\r\n                      onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    />\r\n                    <Button\r\n                      onClick={() => unstake()}\r\n                      className=\"flex flex-row items-center w-48 justify-center\"\r\n                    >\r\n                      {unstakeLoading ? (\r\n                        <Spinner size={30} />\r\n                      ) : (\r\n                        <>\r\n                          <img src=\"/images/unlocked.svg\" width=\"25\" alt=\"\" />\r\n                          <span className=\"w-24\">UNSTAKE</span>\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card> */}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* <Footer /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };\n","import React, { useState } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport StakingPage from \"./pages/StakingPage\";\r\n\r\nconst App = () => {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <StakingPage />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"./styles/tailwind.css\";\r\nimport \"./styles/index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}